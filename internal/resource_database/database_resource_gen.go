// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_database

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DatabaseResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dba_password": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The password for the DBA user. Can only be specified when creating a database.",
				MarkdownDescription: "The password for the DBA user. Can only be specified when creating a database.",
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "User-defined labels attached to the resource that can be used for filtering",
				MarkdownDescription: "User-defined labels attached to the resource that can be used for filtering",
			},
			"maintenance": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"expires_at_time": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The time at which the project or database will be disabled",
						MarkdownDescription: "The time at which the project or database will be disabled",
					},
					"expires_in": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The time until the project or database is disabled, e.g. `1d`",
						MarkdownDescription: "The time until the project or database is disabled, e.g. `1d`",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("(\\d+)\\s*([A-Za-zÂµ]+)"), ""),
						},
					},
					"is_disabled": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Whether the project or database should be shutdown",
						MarkdownDescription: "Whether the project or database should be shutdown",
					},
				},
				CustomType: MaintenanceType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("[a-z][a-z0-9]*"), ""),
				},
			},
			"organization": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("[a-z][a-z0-9]*"), ""),
				},
			},
			"project": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("[a-z][a-z0-9]*"), ""),
				},
			},
			"properties": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"archive_disk_size": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The size of the archive volumes for the database. Can be only updated to increase the volume size.",
						MarkdownDescription: "The size of the archive volumes for the database. Can be only updated to increase the volume size.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE])?"), ""),
						},
					},
					"inherit_tier_parameters": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Whether to inherit tier parameters from the project if the database service tier matches the project.",
						MarkdownDescription: "Whether to inherit tier parameters from the project if the database service tier matches the project.",
					},
					"journal_disk_size": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The size of the journal volumes for the database. Can be only updated to increase the volume size.",
						MarkdownDescription: "The size of the journal volumes for the database. Can be only updated to increase the volume size.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE])?"), ""),
						},
					},
					"product_version": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The version/tag of the NuoDB image to use. For available tags, see https://hub.docker.com/r/nuodb/nuodb-ce/tags. If omitted, the database version will be inherited from the project.",
						MarkdownDescription: "The version/tag of the NuoDB image to use. For available tags, see https://hub.docker.com/r/nuodb/nuodb-ce/tags. If omitted, the database version will be inherited from the project.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("([1-9][0-9]*|[1-9][0-9]*\\.[0-9]+|[1-9][0-9]*\\.[0-9]+\\.[0-9]+)([._-][a-z0-9._-]+)?"), ""),
						},
					},
					"tier_parameters": schema.MapAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Opaque parameters supplied to database service tier.",
						MarkdownDescription: "Opaque parameters supplied to database service tier.",
					},
				},
				CustomType: PropertiesType{
					ObjectType: types.ObjectType{
						AttrTypes: PropertiesValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"resource_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.",
				MarkdownDescription: "The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.",
			},
			"restore_from": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"backup": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The name of the backup to restore the database from. If a fully-qualified name is not supplied, then the organization, project, or name of the database being created is assumed.",
						MarkdownDescription: "The name of the backup to restore the database from. If a fully-qualified name is not supplied, then the organization, project, or name of the database being created is assumed.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("([a-z][a-z0-9]*/){0,3}([0-9]+|[a-z][a-z0-9]*)"), ""),
						},
					},
				},
				CustomType: RestoreFromType{
					ObjectType: types.ObjectType{
						AttrTypes: RestoreFromValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"ca_pem": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The PEM-encoded certificate for SQL clients to verify database servers",
						MarkdownDescription: "The PEM-encoded certificate for SQL clients to verify database servers",
					},
					"message": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Message summarizing the state of the database",
						MarkdownDescription: "Message summarizing the state of the database",
					},
					"ready": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Whether the database is ready",
						MarkdownDescription: "Whether the database is ready",
					},
					"shutdown": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Whether the database has shutdown",
						MarkdownDescription: "Whether the database has shutdown",
					},
					"sql_endpoint": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The endpoint for SQL clients to connect to",
						MarkdownDescription: "The endpoint for SQL clients to connect to",
					},
					"state": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The state of the database:\n  * `Available` - The database is ready to accept SQL connections\n  * `Creating` - The database is being created and not yet available\n  * `Modifying` - The database is being modified\n  * `Stopping` - Shutdown is in progress for this database\n  * `Stopped` - The database has been stopped\n  * `Expired` - The database has expired\n  * `Failed` - The database has failed to achieve a usable state\n  * `Deleting` - The database has been marked for deletion, which is in progress",
						MarkdownDescription: "The state of the database:\n  * `Available` - The database is ready to accept SQL connections\n  * `Creating` - The database is being created and not yet available\n  * `Modifying` - The database is being modified\n  * `Stopping` - Shutdown is in progress for this database\n  * `Stopped` - The database has been stopped\n  * `Expired` - The database has expired\n  * `Failed` - The database has failed to achieve a usable state\n  * `Deleting` - The database has been marked for deletion, which is in progress",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"Available",
								"Creating",
								"Modifying",
								"Stopping",
								"Stopped",
								"Expired",
								"Failed",
								"Deleting",
							),
						},
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"tier": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The service tier for the database. If omitted, the project service tier is inherited.",
				MarkdownDescription: "The service tier for the database. If omitted, the project service tier is inherited.",
			},
		},
	}
}

type DatabaseModel struct {
	DbaPassword     types.String     `tfsdk:"dba_password"`
	Labels          types.Map        `tfsdk:"labels"`
	Maintenance     MaintenanceValue `tfsdk:"maintenance"`
	Name            types.String     `tfsdk:"name"`
	Organization    types.String     `tfsdk:"organization"`
	Project         types.String     `tfsdk:"project"`
	Properties      PropertiesValue  `tfsdk:"properties"`
	ResourceVersion types.String     `tfsdk:"resource_version"`
	RestoreFrom     RestoreFromValue `tfsdk:"restore_from"`
	Status          StatusValue      `tfsdk:"status"`
	Tier            types.String     `tfsdk:"tier"`
}

var _ basetypes.ObjectTypable = MaintenanceType{}

type MaintenanceType struct {
	basetypes.ObjectType
}

func (t MaintenanceType) Equal(o attr.Type) bool {
	other, ok := o.(MaintenanceType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MaintenanceType) String() string {
	return "MaintenanceType"
}

func (t MaintenanceType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	expiresAtTimeAttribute, ok := attributes["expires_at_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expires_at_time is missing from object`)

		return nil, diags
	}

	expiresAtTimeVal, ok := expiresAtTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expires_at_time expected to be basetypes.StringValue, was: %T`, expiresAtTimeAttribute))
	}

	expiresInAttribute, ok := attributes["expires_in"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expires_in is missing from object`)

		return nil, diags
	}

	expiresInVal, ok := expiresInAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expires_in expected to be basetypes.StringValue, was: %T`, expiresInAttribute))
	}

	isDisabledAttribute, ok := attributes["is_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_disabled is missing from object`)

		return nil, diags
	}

	isDisabledVal, ok := isDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_disabled expected to be basetypes.BoolValue, was: %T`, isDisabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MaintenanceValue{
		ExpiresAtTime: expiresAtTimeVal,
		ExpiresIn:     expiresInVal,
		IsDisabled:    isDisabledVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceValueNull() MaintenanceValue {
	return MaintenanceValue{
		state: attr.ValueStateNull,
	}
}

func NewMaintenanceValueUnknown() MaintenanceValue {
	return MaintenanceValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMaintenanceValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MaintenanceValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MaintenanceValue Attribute Value",
				"While creating a MaintenanceValue value, a missing attribute value was detected. "+
					"A MaintenanceValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MaintenanceValue Attribute Type",
				"While creating a MaintenanceValue value, an invalid attribute value was detected. "+
					"A MaintenanceValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MaintenanceValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MaintenanceValue Attribute Value",
				"While creating a MaintenanceValue value, an extra attribute value was detected. "+
					"A MaintenanceValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MaintenanceValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMaintenanceValueUnknown(), diags
	}

	expiresAtTimeAttribute, ok := attributes["expires_at_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expires_at_time is missing from object`)

		return NewMaintenanceValueUnknown(), diags
	}

	expiresAtTimeVal, ok := expiresAtTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expires_at_time expected to be basetypes.StringValue, was: %T`, expiresAtTimeAttribute))
	}

	expiresInAttribute, ok := attributes["expires_in"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expires_in is missing from object`)

		return NewMaintenanceValueUnknown(), diags
	}

	expiresInVal, ok := expiresInAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expires_in expected to be basetypes.StringValue, was: %T`, expiresInAttribute))
	}

	isDisabledAttribute, ok := attributes["is_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_disabled is missing from object`)

		return NewMaintenanceValueUnknown(), diags
	}

	isDisabledVal, ok := isDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_disabled expected to be basetypes.BoolValue, was: %T`, isDisabledAttribute))
	}

	if diags.HasError() {
		return NewMaintenanceValueUnknown(), diags
	}

	return MaintenanceValue{
		ExpiresAtTime: expiresAtTimeVal,
		ExpiresIn:     expiresInVal,
		IsDisabled:    isDisabledVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MaintenanceValue {
	object, diags := NewMaintenanceValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMaintenanceValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MaintenanceType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMaintenanceValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMaintenanceValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMaintenanceValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMaintenanceValueMust(MaintenanceValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MaintenanceType) ValueType(ctx context.Context) attr.Value {
	return MaintenanceValue{}
}

var _ basetypes.ObjectValuable = MaintenanceValue{}

type MaintenanceValue struct {
	ExpiresAtTime basetypes.StringValue `tfsdk:"expires_at_time"`
	ExpiresIn     basetypes.StringValue `tfsdk:"expires_in"`
	IsDisabled    basetypes.BoolValue   `tfsdk:"is_disabled"`
	state         attr.ValueState
}

func (v MaintenanceValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["expires_at_time"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["expires_in"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_disabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.ExpiresAtTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["expires_at_time"] = val

		val, err = v.ExpiresIn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["expires_in"] = val

		val, err = v.IsDisabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_disabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MaintenanceValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MaintenanceValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MaintenanceValue) String() string {
	return "MaintenanceValue"
}

func (v MaintenanceValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"expires_at_time": basetypes.StringType{},
			"expires_in":      basetypes.StringType{},
			"is_disabled":     basetypes.BoolType{},
		},
		map[string]attr.Value{
			"expires_at_time": v.ExpiresAtTime,
			"expires_in":      v.ExpiresIn,
			"is_disabled":     v.IsDisabled,
		})

	return objVal, diags
}

func (v MaintenanceValue) Equal(o attr.Value) bool {
	other, ok := o.(MaintenanceValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ExpiresAtTime.Equal(other.ExpiresAtTime) {
		return false
	}

	if !v.ExpiresIn.Equal(other.ExpiresIn) {
		return false
	}

	if !v.IsDisabled.Equal(other.IsDisabled) {
		return false
	}

	return true
}

func (v MaintenanceValue) Type(ctx context.Context) attr.Type {
	return MaintenanceType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MaintenanceValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"expires_at_time": basetypes.StringType{},
		"expires_in":      basetypes.StringType{},
		"is_disabled":     basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = PropertiesType{}

type PropertiesType struct {
	basetypes.ObjectType
}

func (t PropertiesType) Equal(o attr.Type) bool {
	other, ok := o.(PropertiesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PropertiesType) String() string {
	return "PropertiesType"
}

func (t PropertiesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	archiveDiskSizeAttribute, ok := attributes["archive_disk_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`archive_disk_size is missing from object`)

		return nil, diags
	}

	archiveDiskSizeVal, ok := archiveDiskSizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`archive_disk_size expected to be basetypes.StringValue, was: %T`, archiveDiskSizeAttribute))
	}

	inheritTierParametersAttribute, ok := attributes["inherit_tier_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inherit_tier_parameters is missing from object`)

		return nil, diags
	}

	inheritTierParametersVal, ok := inheritTierParametersAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inherit_tier_parameters expected to be basetypes.BoolValue, was: %T`, inheritTierParametersAttribute))
	}

	journalDiskSizeAttribute, ok := attributes["journal_disk_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`journal_disk_size is missing from object`)

		return nil, diags
	}

	journalDiskSizeVal, ok := journalDiskSizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`journal_disk_size expected to be basetypes.StringValue, was: %T`, journalDiskSizeAttribute))
	}

	productVersionAttribute, ok := attributes["product_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_version is missing from object`)

		return nil, diags
	}

	productVersionVal, ok := productVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_version expected to be basetypes.StringValue, was: %T`, productVersionAttribute))
	}

	tierParametersAttribute, ok := attributes["tier_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tier_parameters is missing from object`)

		return nil, diags
	}

	tierParametersVal, ok := tierParametersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tier_parameters expected to be basetypes.MapValue, was: %T`, tierParametersAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PropertiesValue{
		ArchiveDiskSize:       archiveDiskSizeVal,
		InheritTierParameters: inheritTierParametersVal,
		JournalDiskSize:       journalDiskSizeVal,
		ProductVersion:        productVersionVal,
		TierParameters:        tierParametersVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPropertiesValueNull() PropertiesValue {
	return PropertiesValue{
		state: attr.ValueStateNull,
	}
}

func NewPropertiesValueUnknown() PropertiesValue {
	return PropertiesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPropertiesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PropertiesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PropertiesValue Attribute Value",
				"While creating a PropertiesValue value, a missing attribute value was detected. "+
					"A PropertiesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PropertiesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PropertiesValue Attribute Type",
				"While creating a PropertiesValue value, an invalid attribute value was detected. "+
					"A PropertiesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PropertiesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PropertiesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PropertiesValue Attribute Value",
				"While creating a PropertiesValue value, an extra attribute value was detected. "+
					"A PropertiesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PropertiesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPropertiesValueUnknown(), diags
	}

	archiveDiskSizeAttribute, ok := attributes["archive_disk_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`archive_disk_size is missing from object`)

		return NewPropertiesValueUnknown(), diags
	}

	archiveDiskSizeVal, ok := archiveDiskSizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`archive_disk_size expected to be basetypes.StringValue, was: %T`, archiveDiskSizeAttribute))
	}

	inheritTierParametersAttribute, ok := attributes["inherit_tier_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inherit_tier_parameters is missing from object`)

		return NewPropertiesValueUnknown(), diags
	}

	inheritTierParametersVal, ok := inheritTierParametersAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inherit_tier_parameters expected to be basetypes.BoolValue, was: %T`, inheritTierParametersAttribute))
	}

	journalDiskSizeAttribute, ok := attributes["journal_disk_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`journal_disk_size is missing from object`)

		return NewPropertiesValueUnknown(), diags
	}

	journalDiskSizeVal, ok := journalDiskSizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`journal_disk_size expected to be basetypes.StringValue, was: %T`, journalDiskSizeAttribute))
	}

	productVersionAttribute, ok := attributes["product_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_version is missing from object`)

		return NewPropertiesValueUnknown(), diags
	}

	productVersionVal, ok := productVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_version expected to be basetypes.StringValue, was: %T`, productVersionAttribute))
	}

	tierParametersAttribute, ok := attributes["tier_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tier_parameters is missing from object`)

		return NewPropertiesValueUnknown(), diags
	}

	tierParametersVal, ok := tierParametersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tier_parameters expected to be basetypes.MapValue, was: %T`, tierParametersAttribute))
	}

	if diags.HasError() {
		return NewPropertiesValueUnknown(), diags
	}

	return PropertiesValue{
		ArchiveDiskSize:       archiveDiskSizeVal,
		InheritTierParameters: inheritTierParametersVal,
		JournalDiskSize:       journalDiskSizeVal,
		ProductVersion:        productVersionVal,
		TierParameters:        tierParametersVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPropertiesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PropertiesValue {
	object, diags := NewPropertiesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPropertiesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PropertiesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPropertiesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPropertiesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPropertiesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPropertiesValueMust(PropertiesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PropertiesType) ValueType(ctx context.Context) attr.Value {
	return PropertiesValue{}
}

var _ basetypes.ObjectValuable = PropertiesValue{}

type PropertiesValue struct {
	ArchiveDiskSize       basetypes.StringValue `tfsdk:"archive_disk_size"`
	InheritTierParameters basetypes.BoolValue   `tfsdk:"inherit_tier_parameters"`
	JournalDiskSize       basetypes.StringValue `tfsdk:"journal_disk_size"`
	ProductVersion        basetypes.StringValue `tfsdk:"product_version"`
	TierParameters        basetypes.MapValue    `tfsdk:"tier_parameters"`
	state                 attr.ValueState
}

func (v PropertiesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["archive_disk_size"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["inherit_tier_parameters"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["journal_disk_size"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["product_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tier_parameters"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ArchiveDiskSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["archive_disk_size"] = val

		val, err = v.InheritTierParameters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inherit_tier_parameters"] = val

		val, err = v.JournalDiskSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["journal_disk_size"] = val

		val, err = v.ProductVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["product_version"] = val

		val, err = v.TierParameters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tier_parameters"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PropertiesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PropertiesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PropertiesValue) String() string {
	return "PropertiesValue"
}

func (v PropertiesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	tierParametersVal, d := types.MapValue(types.StringType, v.TierParameters.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"archive_disk_size":       basetypes.StringType{},
			"inherit_tier_parameters": basetypes.BoolType{},
			"journal_disk_size":       basetypes.StringType{},
			"product_version":         basetypes.StringType{},
			"tier_parameters": basetypes.MapType{
				ElemType: types.StringType,
			},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"archive_disk_size":       basetypes.StringType{},
			"inherit_tier_parameters": basetypes.BoolType{},
			"journal_disk_size":       basetypes.StringType{},
			"product_version":         basetypes.StringType{},
			"tier_parameters": basetypes.MapType{
				ElemType: types.StringType,
			},
		},
		map[string]attr.Value{
			"archive_disk_size":       v.ArchiveDiskSize,
			"inherit_tier_parameters": v.InheritTierParameters,
			"journal_disk_size":       v.JournalDiskSize,
			"product_version":         v.ProductVersion,
			"tier_parameters":         tierParametersVal,
		})

	return objVal, diags
}

func (v PropertiesValue) Equal(o attr.Value) bool {
	other, ok := o.(PropertiesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ArchiveDiskSize.Equal(other.ArchiveDiskSize) {
		return false
	}

	if !v.InheritTierParameters.Equal(other.InheritTierParameters) {
		return false
	}

	if !v.JournalDiskSize.Equal(other.JournalDiskSize) {
		return false
	}

	if !v.ProductVersion.Equal(other.ProductVersion) {
		return false
	}

	if !v.TierParameters.Equal(other.TierParameters) {
		return false
	}

	return true
}

func (v PropertiesValue) Type(ctx context.Context) attr.Type {
	return PropertiesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PropertiesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"archive_disk_size":       basetypes.StringType{},
		"inherit_tier_parameters": basetypes.BoolType{},
		"journal_disk_size":       basetypes.StringType{},
		"product_version":         basetypes.StringType{},
		"tier_parameters": basetypes.MapType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = RestoreFromType{}

type RestoreFromType struct {
	basetypes.ObjectType
}

func (t RestoreFromType) Equal(o attr.Type) bool {
	other, ok := o.(RestoreFromType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RestoreFromType) String() string {
	return "RestoreFromType"
}

func (t RestoreFromType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	backupAttribute, ok := attributes["backup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backup is missing from object`)

		return nil, diags
	}

	backupVal, ok := backupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backup expected to be basetypes.StringValue, was: %T`, backupAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RestoreFromValue{
		Backup: backupVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewRestoreFromValueNull() RestoreFromValue {
	return RestoreFromValue{
		state: attr.ValueStateNull,
	}
}

func NewRestoreFromValueUnknown() RestoreFromValue {
	return RestoreFromValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRestoreFromValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RestoreFromValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RestoreFromValue Attribute Value",
				"While creating a RestoreFromValue value, a missing attribute value was detected. "+
					"A RestoreFromValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RestoreFromValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RestoreFromValue Attribute Type",
				"While creating a RestoreFromValue value, an invalid attribute value was detected. "+
					"A RestoreFromValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RestoreFromValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RestoreFromValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RestoreFromValue Attribute Value",
				"While creating a RestoreFromValue value, an extra attribute value was detected. "+
					"A RestoreFromValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RestoreFromValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRestoreFromValueUnknown(), diags
	}

	backupAttribute, ok := attributes["backup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backup is missing from object`)

		return NewRestoreFromValueUnknown(), diags
	}

	backupVal, ok := backupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backup expected to be basetypes.StringValue, was: %T`, backupAttribute))
	}

	if diags.HasError() {
		return NewRestoreFromValueUnknown(), diags
	}

	return RestoreFromValue{
		Backup: backupVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewRestoreFromValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RestoreFromValue {
	object, diags := NewRestoreFromValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRestoreFromValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RestoreFromType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRestoreFromValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRestoreFromValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRestoreFromValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRestoreFromValueMust(RestoreFromValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RestoreFromType) ValueType(ctx context.Context) attr.Value {
	return RestoreFromValue{}
}

var _ basetypes.ObjectValuable = RestoreFromValue{}

type RestoreFromValue struct {
	Backup basetypes.StringValue `tfsdk:"backup"`
	state  attr.ValueState
}

func (v RestoreFromValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["backup"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Backup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["backup"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RestoreFromValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RestoreFromValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RestoreFromValue) String() string {
	return "RestoreFromValue"
}

func (v RestoreFromValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"backup": basetypes.StringType{},
		},
		map[string]attr.Value{
			"backup": v.Backup,
		})

	return objVal, diags
}

func (v RestoreFromValue) Equal(o attr.Value) bool {
	other, ok := o.(RestoreFromValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Backup.Equal(other.Backup) {
		return false
	}

	return true
}

func (v RestoreFromValue) Type(ctx context.Context) attr.Type {
	return RestoreFromType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RestoreFromValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"backup": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	caPemAttribute, ok := attributes["ca_pem"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_pem is missing from object`)

		return nil, diags
	}

	caPemVal, ok := caPemAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_pem expected to be basetypes.StringValue, was: %T`, caPemAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return nil, diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	readyAttribute, ok := attributes["ready"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ready is missing from object`)

		return nil, diags
	}

	readyVal, ok := readyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ready expected to be basetypes.BoolValue, was: %T`, readyAttribute))
	}

	shutdownAttribute, ok := attributes["shutdown"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`shutdown is missing from object`)

		return nil, diags
	}

	shutdownVal, ok := shutdownAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`shutdown expected to be basetypes.BoolValue, was: %T`, shutdownAttribute))
	}

	sqlEndpointAttribute, ok := attributes["sql_endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sql_endpoint is missing from object`)

		return nil, diags
	}

	sqlEndpointVal, ok := sqlEndpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sql_endpoint expected to be basetypes.StringValue, was: %T`, sqlEndpointAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		CaPem:       caPemVal,
		Message:     messageVal,
		Ready:       readyVal,
		Shutdown:    shutdownVal,
		SqlEndpoint: sqlEndpointVal,
		State:       stateVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	caPemAttribute, ok := attributes["ca_pem"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ca_pem is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	caPemVal, ok := caPemAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ca_pem expected to be basetypes.StringValue, was: %T`, caPemAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	readyAttribute, ok := attributes["ready"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ready is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	readyVal, ok := readyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ready expected to be basetypes.BoolValue, was: %T`, readyAttribute))
	}

	shutdownAttribute, ok := attributes["shutdown"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`shutdown is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	shutdownVal, ok := shutdownAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`shutdown expected to be basetypes.BoolValue, was: %T`, shutdownAttribute))
	}

	sqlEndpointAttribute, ok := attributes["sql_endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sql_endpoint is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	sqlEndpointVal, ok := sqlEndpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sql_endpoint expected to be basetypes.StringValue, was: %T`, sqlEndpointAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		CaPem:       caPemVal,
		Message:     messageVal,
		Ready:       readyVal,
		Shutdown:    shutdownVal,
		SqlEndpoint: sqlEndpointVal,
		State:       stateVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	CaPem       basetypes.StringValue `tfsdk:"ca_pem"`
	Message     basetypes.StringValue `tfsdk:"message"`
	Ready       basetypes.BoolValue   `tfsdk:"ready"`
	Shutdown    basetypes.BoolValue   `tfsdk:"shutdown"`
	SqlEndpoint basetypes.StringValue `tfsdk:"sql_endpoint"`
	State       basetypes.StringValue `tfsdk:"state"`
	state       attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["ca_pem"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ready"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["shutdown"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["sql_endpoint"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.CaPem.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ca_pem"] = val

		val, err = v.Message.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["message"] = val

		val, err = v.Ready.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ready"] = val

		val, err = v.Shutdown.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["shutdown"] = val

		val, err = v.SqlEndpoint.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sql_endpoint"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"ca_pem":       basetypes.StringType{},
			"message":      basetypes.StringType{},
			"ready":        basetypes.BoolType{},
			"shutdown":     basetypes.BoolType{},
			"sql_endpoint": basetypes.StringType{},
			"state":        basetypes.StringType{},
		},
		map[string]attr.Value{
			"ca_pem":       v.CaPem,
			"message":      v.Message,
			"ready":        v.Ready,
			"shutdown":     v.Shutdown,
			"sql_endpoint": v.SqlEndpoint,
			"state":        v.State,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CaPem.Equal(other.CaPem) {
		return false
	}

	if !v.Message.Equal(other.Message) {
		return false
	}

	if !v.Ready.Equal(other.Ready) {
		return false
	}

	if !v.Shutdown.Equal(other.Shutdown) {
		return false
	}

	if !v.SqlEndpoint.Equal(other.SqlEndpoint) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ca_pem":       basetypes.StringType{},
		"message":      basetypes.StringType{},
		"ready":        basetypes.BoolType{},
		"shutdown":     basetypes.BoolType{},
		"sql_endpoint": basetypes.StringType{},
		"state":        basetypes.StringType{},
	}
}
