/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabasequotaspecScopeLabelselectorMatchExpressions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabasequotaspecScopeLabelselectorMatchExpressions{}

// DatabasequotaspecScopeLabelselectorMatchExpressions struct for DatabasequotaspecScopeLabelselectorMatchExpressions
type DatabasequotaspecScopeLabelselectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `json:"values,omitempty"`
}

type _DatabasequotaspecScopeLabelselectorMatchExpressions DatabasequotaspecScopeLabelselectorMatchExpressions

// NewDatabasequotaspecScopeLabelselectorMatchExpressions instantiates a new DatabasequotaspecScopeLabelselectorMatchExpressions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabasequotaspecScopeLabelselectorMatchExpressions(key string, operator string) *DatabasequotaspecScopeLabelselectorMatchExpressions {
	this := DatabasequotaspecScopeLabelselectorMatchExpressions{}
	this.Key = key
	this.Operator = operator
	return &this
}

// NewDatabasequotaspecScopeLabelselectorMatchExpressionsWithDefaults instantiates a new DatabasequotaspecScopeLabelselectorMatchExpressions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabasequotaspecScopeLabelselectorMatchExpressionsWithDefaults() *DatabasequotaspecScopeLabelselectorMatchExpressions {
	this := DatabasequotaspecScopeLabelselectorMatchExpressions{}
	return &this
}

// GetKey returns the Key field value
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) SetKey(v string) {
	o.Key = v
}

// GetOperator returns the Operator field value
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) SetOperator(v string) {
	o.Operator = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) SetValues(v []string) {
	o.Values = v
}

func (o DatabasequotaspecScopeLabelselectorMatchExpressions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabasequotaspecScopeLabelselectorMatchExpressions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["operator"] = o.Operator
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

func (o *DatabasequotaspecScopeLabelselectorMatchExpressions) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabasequotaspecScopeLabelselectorMatchExpressions := _DatabasequotaspecScopeLabelselectorMatchExpressions{}

	err = json.Unmarshal(bytes, &varDatabasequotaspecScopeLabelselectorMatchExpressions)

	if err != nil {
		return err
	}

	*o = DatabasequotaspecScopeLabelselectorMatchExpressions(varDatabasequotaspecScopeLabelselectorMatchExpressions)

	return err
}

type NullableDatabasequotaspecScopeLabelselectorMatchExpressions struct {
	value *DatabasequotaspecScopeLabelselectorMatchExpressions
	isSet bool
}

func (v NullableDatabasequotaspecScopeLabelselectorMatchExpressions) Get() *DatabasequotaspecScopeLabelselectorMatchExpressions {
	return v.value
}

func (v *NullableDatabasequotaspecScopeLabelselectorMatchExpressions) Set(val *DatabasequotaspecScopeLabelselectorMatchExpressions) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabasequotaspecScopeLabelselectorMatchExpressions) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabasequotaspecScopeLabelselectorMatchExpressions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabasequotaspecScopeLabelselectorMatchExpressions(val *DatabasequotaspecScopeLabelselectorMatchExpressions) *NullableDatabasequotaspecScopeLabelselectorMatchExpressions {
	return &NullableDatabasequotaspecScopeLabelselectorMatchExpressions{value: val, isSet: true}
}

func (v NullableDatabasequotaspecScopeLabelselectorMatchExpressions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabasequotaspecScopeLabelselectorMatchExpressions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


