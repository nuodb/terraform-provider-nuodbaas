/*
NuoDB Control Plane REST API

Testing DatabasesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package nuodbaas

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nuodb/nuodbaas-tf-plugin/generated_client"
)

func Test_nuodbaas_DatabasesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DatabasesAPIService CreateDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var database string

		httpRes, err := apiClient.DatabasesAPI.CreateDatabase(context.Background(), organization, project, database).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var database string

		httpRes, err := apiClient.DatabasesAPI.DeleteDatabase(context.Background(), organization, project, database).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetAllDatabases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.GetAllDatabases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var database string

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabase(context.Background(), organization, project, database).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabases(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetOrganizationDatabases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string

		resp, httpRes, err := apiClient.DatabasesAPI.GetOrganizationDatabases(context.Background(), organization).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService PatchDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var database string

		httpRes, err := apiClient.DatabasesAPI.PatchDatabase(context.Background(), organization, project, database).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
