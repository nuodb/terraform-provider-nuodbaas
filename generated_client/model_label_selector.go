/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the LabelSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelSelector{}

// LabelSelector struct for LabelSelector
type LabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []DatabasequotaspecScopeLabelselectorMatchExpressions `json:"matchExpressions,omitempty"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.
	MatchLabels *map[string]string `json:"matchLabels,omitempty"`
}

// NewLabelSelector instantiates a new LabelSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelSelector() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// NewLabelSelectorWithDefaults instantiates a new LabelSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelSelectorWithDefaults() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchExpressions() []DatabasequotaspecScopeLabelselectorMatchExpressions {
	if o == nil || IsNil(o.MatchExpressions) {
		var ret []DatabasequotaspecScopeLabelselectorMatchExpressions
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchExpressionsOk() ([]DatabasequotaspecScopeLabelselectorMatchExpressions, bool) {
	if o == nil || IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchExpressions() bool {
	if o != nil && !IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []DatabasequotaspecScopeLabelselectorMatchExpressions and assigns it to the MatchExpressions field.
func (o *LabelSelector) SetMatchExpressions(v []DatabasequotaspecScopeLabelselectorMatchExpressions) {
	o.MatchExpressions = v
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchLabels() map[string]string {
	if o == nil || IsNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return *o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.MatchLabels) {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchLabels() bool {
	if o != nil && !IsNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the MatchLabels field.
func (o *LabelSelector) SetMatchLabels(v map[string]string) {
	o.MatchLabels = &v
}

func (o LabelSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if !IsNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return toSerialize, nil
}

type NullableLabelSelector struct {
	value *LabelSelector
	isSet bool
}

func (v NullableLabelSelector) Get() *LabelSelector {
	return v.value
}

func (v *NullableLabelSelector) Set(val *LabelSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelSelector(val *LabelSelector) *NullableLabelSelector {
	return &NullableLabelSelector{value: val, isSet: true}
}

func (v NullableLabelSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


