/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"fmt"
)

// AnyTypeValue - struct for AnyTypeValue
type AnyTypeValue struct {
	Bool *bool
	Float32 *float32
	Object *map[string]interface{}
	String *string
}

// boolAsAnyTypeValue is a convenience function that returns bool wrapped in AnyTypeValue
func BoolAsAnyTypeValue(v *bool) AnyTypeValue {
	return AnyTypeValue{
		Bool: v,
	}
}

// float32AsAnyTypeValue is a convenience function that returns float32 wrapped in AnyTypeValue
func Float32AsAnyTypeValue(v *float32) AnyTypeValue {
	return AnyTypeValue{
		Float32: v,
	}
}

// map[string]interface{}AsAnyTypeValue is a convenience function that returns map[string]interface{} wrapped in AnyTypeValue
func ObjectAsAnyTypeValue(v *map[string]interface{}) AnyTypeValue {
	return AnyTypeValue{
		Object: v,
	}
}

// stringAsAnyTypeValue is a convenience function that returns string wrapped in AnyTypeValue
func StringAsAnyTypeValue(v *string) AnyTypeValue {
	return AnyTypeValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnyTypeValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Object
	err = newStrictDecoder(data).Decode(&dst.Object)
	if err == nil {
		jsonObject, _ := json.Marshal(dst.Object)
		if string(jsonObject) == "{}" { // empty struct
			dst.Object = nil
		} else {
			match++
		}
	} else {
		dst.Object = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.Object = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnyTypeValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnyTypeValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnyTypeValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Object != nil {
		return json.Marshal(&src.Object)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnyTypeValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Object != nil {
		return obj.Object
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAnyTypeValue struct {
	value *AnyTypeValue
	isSet bool
}

func (v NullableAnyTypeValue) Get() *AnyTypeValue {
	return v.value
}

func (v *NullableAnyTypeValue) Set(val *AnyTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAnyTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAnyTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnyTypeValue(val *AnyTypeValue) *NullableAnyTypeValue {
	return &NullableAnyTypeValue{value: val, isSet: true}
}

func (v NullableAnyTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnyTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


