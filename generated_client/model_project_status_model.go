/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the ProjectStatusModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectStatusModel{}

// ProjectStatusModel struct for ProjectStatusModel
type ProjectStatusModel struct {
	// The PEM-encoded certificate for SQL clients to verify database servers within the project
	CaPem *string `json:"caPem,omitempty"`
	// Whether the project is ready
	Ready *bool `json:"ready,omitempty"`
	// Whether the project and all of its databases have shutdown
	Shutdown *bool `json:"shutdown,omitempty"`
	// Message summarizing the state of the project
	Message *string `json:"message,omitempty"`
	// The state of the project:   * `Available` - The project is available   * `Creating` - The project is being created and not yet available   * `Modifying` - The project is being modified   * `Stopping` - Shutdown is in progress for this project   * `Stopped` - The project and its databases have been stopped   * `Expired` - The project and its databases have expired   * `Failed` - The project has failed to achieve a usable state   * `Deleting` - The project has been marked for deletion, which is in progress
	State *string `json:"state,omitempty"`
}

// NewProjectStatusModel instantiates a new ProjectStatusModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectStatusModel() *ProjectStatusModel {
	this := ProjectStatusModel{}
	return &this
}

// NewProjectStatusModelWithDefaults instantiates a new ProjectStatusModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectStatusModelWithDefaults() *ProjectStatusModel {
	this := ProjectStatusModel{}
	return &this
}

// GetCaPem returns the CaPem field value if set, zero value otherwise.
func (o *ProjectStatusModel) GetCaPem() string {
	if o == nil || IsNil(o.CaPem) {
		var ret string
		return ret
	}
	return *o.CaPem
}

// GetCaPemOk returns a tuple with the CaPem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatusModel) GetCaPemOk() (*string, bool) {
	if o == nil || IsNil(o.CaPem) {
		return nil, false
	}
	return o.CaPem, true
}

// HasCaPem returns a boolean if a field has been set.
func (o *ProjectStatusModel) HasCaPem() bool {
	if o != nil && !IsNil(o.CaPem) {
		return true
	}

	return false
}

// SetCaPem gets a reference to the given string and assigns it to the CaPem field.
func (o *ProjectStatusModel) SetCaPem(v string) {
	o.CaPem = &v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *ProjectStatusModel) GetReady() bool {
	if o == nil || IsNil(o.Ready) {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatusModel) GetReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.Ready) {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *ProjectStatusModel) HasReady() bool {
	if o != nil && !IsNil(o.Ready) {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *ProjectStatusModel) SetReady(v bool) {
	o.Ready = &v
}

// GetShutdown returns the Shutdown field value if set, zero value otherwise.
func (o *ProjectStatusModel) GetShutdown() bool {
	if o == nil || IsNil(o.Shutdown) {
		var ret bool
		return ret
	}
	return *o.Shutdown
}

// GetShutdownOk returns a tuple with the Shutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatusModel) GetShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Shutdown) {
		return nil, false
	}
	return o.Shutdown, true
}

// HasShutdown returns a boolean if a field has been set.
func (o *ProjectStatusModel) HasShutdown() bool {
	if o != nil && !IsNil(o.Shutdown) {
		return true
	}

	return false
}

// SetShutdown gets a reference to the given bool and assigns it to the Shutdown field.
func (o *ProjectStatusModel) SetShutdown(v bool) {
	o.Shutdown = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProjectStatusModel) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatusModel) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProjectStatusModel) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProjectStatusModel) SetMessage(v string) {
	o.Message = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ProjectStatusModel) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatusModel) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ProjectStatusModel) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ProjectStatusModel) SetState(v string) {
	o.State = &v
}

func (o ProjectStatusModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectStatusModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaPem) {
		toSerialize["caPem"] = o.CaPem
	}
	if !IsNil(o.Ready) {
		toSerialize["ready"] = o.Ready
	}
	if !IsNil(o.Shutdown) {
		toSerialize["shutdown"] = o.Shutdown
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableProjectStatusModel struct {
	value *ProjectStatusModel
	isSet bool
}

func (v NullableProjectStatusModel) Get() *ProjectStatusModel {
	return v.value
}

func (v *NullableProjectStatusModel) Set(val *ProjectStatusModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectStatusModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectStatusModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectStatusModel(val *ProjectStatusModel) *NullableProjectStatusModel {
	return &NullableProjectStatusModel{value: val, isSet: true}
}

func (v NullableProjectStatusModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectStatusModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


