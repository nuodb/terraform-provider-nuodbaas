/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the DatabaseCreateUpdateModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseCreateUpdateModel{}

// DatabaseCreateUpdateModel struct for DatabaseCreateUpdateModel
type DatabaseCreateUpdateModel struct {
	Organization *string `json:"organization,omitempty"`
	Project *string `json:"project,omitempty"`
	Name *string `json:"name,omitempty"`
	// User-defined labels attached to the resource that can be used for filtering
	Labels *map[string]string `json:"labels,omitempty"`
	// The password for the DBA user. Can only be specified when creating a database.
	DbaPassword *string `json:"dbaPassword,omitempty"`
	// The service tier for the database. If omitted, the project service tier is inherited.
	Tier *string `json:"tier,omitempty"`
	Maintenance *MaintenanceModel `json:"maintenance,omitempty"`
	Properties *DatabasePropertiesModel `json:"properties,omitempty"`
	// The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	Status *DatabaseStatusModel `json:"status,omitempty"`
}

// NewDatabaseCreateUpdateModel instantiates a new DatabaseCreateUpdateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseCreateUpdateModel() *DatabaseCreateUpdateModel {
	this := DatabaseCreateUpdateModel{}
	return &this
}

// NewDatabaseCreateUpdateModelWithDefaults instantiates a new DatabaseCreateUpdateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseCreateUpdateModelWithDefaults() *DatabaseCreateUpdateModel {
	this := DatabaseCreateUpdateModel{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *DatabaseCreateUpdateModel) SetOrganization(v string) {
	o.Organization = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *DatabaseCreateUpdateModel) SetProject(v string) {
	o.Project = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseCreateUpdateModel) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *DatabaseCreateUpdateModel) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetDbaPassword returns the DbaPassword field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetDbaPassword() string {
	if o == nil || IsNil(o.DbaPassword) {
		var ret string
		return ret
	}
	return *o.DbaPassword
}

// GetDbaPasswordOk returns a tuple with the DbaPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetDbaPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.DbaPassword) {
		return nil, false
	}
	return o.DbaPassword, true
}

// HasDbaPassword returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasDbaPassword() bool {
	if o != nil && !IsNil(o.DbaPassword) {
		return true
	}

	return false
}

// SetDbaPassword gets a reference to the given string and assigns it to the DbaPassword field.
func (o *DatabaseCreateUpdateModel) SetDbaPassword(v string) {
	o.DbaPassword = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *DatabaseCreateUpdateModel) SetTier(v string) {
	o.Tier = &v
}

// GetMaintenance returns the Maintenance field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetMaintenance() MaintenanceModel {
	if o == nil || IsNil(o.Maintenance) {
		var ret MaintenanceModel
		return ret
	}
	return *o.Maintenance
}

// GetMaintenanceOk returns a tuple with the Maintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetMaintenanceOk() (*MaintenanceModel, bool) {
	if o == nil || IsNil(o.Maintenance) {
		return nil, false
	}
	return o.Maintenance, true
}

// HasMaintenance returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasMaintenance() bool {
	if o != nil && !IsNil(o.Maintenance) {
		return true
	}

	return false
}

// SetMaintenance gets a reference to the given MaintenanceModel and assigns it to the Maintenance field.
func (o *DatabaseCreateUpdateModel) SetMaintenance(v MaintenanceModel) {
	o.Maintenance = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetProperties() DatabasePropertiesModel {
	if o == nil || IsNil(o.Properties) {
		var ret DatabasePropertiesModel
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetPropertiesOk() (*DatabasePropertiesModel, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given DatabasePropertiesModel and assigns it to the Properties field.
func (o *DatabaseCreateUpdateModel) SetProperties(v DatabasePropertiesModel) {
	o.Properties = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *DatabaseCreateUpdateModel) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DatabaseCreateUpdateModel) GetStatus() DatabaseStatusModel {
	if o == nil || IsNil(o.Status) {
		var ret DatabaseStatusModel
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCreateUpdateModel) GetStatusOk() (*DatabaseStatusModel, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DatabaseCreateUpdateModel) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DatabaseStatusModel and assigns it to the Status field.
func (o *DatabaseCreateUpdateModel) SetStatus(v DatabaseStatusModel) {
	o.Status = &v
}

func (o DatabaseCreateUpdateModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseCreateUpdateModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.DbaPassword) {
		toSerialize["dbaPassword"] = o.DbaPassword
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.Maintenance) {
		toSerialize["maintenance"] = o.Maintenance
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDatabaseCreateUpdateModel struct {
	value *DatabaseCreateUpdateModel
	isSet bool
}

func (v NullableDatabaseCreateUpdateModel) Get() *DatabaseCreateUpdateModel {
	return v.value
}

func (v *NullableDatabaseCreateUpdateModel) Set(val *DatabaseCreateUpdateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseCreateUpdateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseCreateUpdateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseCreateUpdateModel(val *DatabaseCreateUpdateModel) *NullableDatabaseCreateUpdateModel {
	return &NullableDatabaseCreateUpdateModel{value: val, isSet: true}
}

func (v NullableDatabaseCreateUpdateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseCreateUpdateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


