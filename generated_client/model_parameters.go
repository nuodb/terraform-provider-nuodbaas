/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the Parameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parameters{}

// Parameters struct for Parameters
type Parameters struct {
	Default *string `json:"default,omitempty"`
	// A JSONSchema used to validate the parameter's value.
	JsonSchema *string `json:"jsonSchema,omitempty"`
}

// NewParameters instantiates a new Parameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameters() *Parameters {
	this := Parameters{}
	return &this
}

// NewParametersWithDefaults instantiates a new Parameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersWithDefaults() *Parameters {
	this := Parameters{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Parameters) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parameters) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Parameters) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *Parameters) SetDefault(v string) {
	o.Default = &v
}

// GetJsonSchema returns the JsonSchema field value if set, zero value otherwise.
func (o *Parameters) GetJsonSchema() string {
	if o == nil || IsNil(o.JsonSchema) {
		var ret string
		return ret
	}
	return *o.JsonSchema
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parameters) GetJsonSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.JsonSchema) {
		return nil, false
	}
	return o.JsonSchema, true
}

// HasJsonSchema returns a boolean if a field has been set.
func (o *Parameters) HasJsonSchema() bool {
	if o != nil && !IsNil(o.JsonSchema) {
		return true
	}

	return false
}

// SetJsonSchema gets a reference to the given string and assigns it to the JsonSchema field.
func (o *Parameters) SetJsonSchema(v string) {
	o.JsonSchema = &v
}

func (o Parameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.JsonSchema) {
		toSerialize["jsonSchema"] = o.JsonSchema
	}
	return toSerialize, nil
}

type NullableParameters struct {
	value *Parameters
	isSet bool
}

func (v NullableParameters) Get() *Parameters {
	return v.value
}

func (v *NullableParameters) Set(val *Parameters) {
	v.value = val
	v.isSet = true
}

func (v NullableParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameters(val *Parameters) *NullableParameters {
	return &NullableParameters{value: val, isSet: true}
}

func (v NullableParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


