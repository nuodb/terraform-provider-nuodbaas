/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the FieldSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldSelector{}

// FieldSelector struct for FieldSelector
type FieldSelector struct {
	// The list of field selector requirements, which are composed with `AND`.
	MatchExpressions []DatabasequotaspecScopeFieldselectorMatchExpressions `json:"matchExpressions,omitempty"`
	// The field selector requirements as a map where each key-value pair is equivalent to an element of `matchExpressions` with `operator` set to `==`. The requirements are composed with `AND`.
	MatchFields *map[string]string `json:"matchFields,omitempty"`
}

// NewFieldSelector instantiates a new FieldSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldSelector() *FieldSelector {
	this := FieldSelector{}
	return &this
}

// NewFieldSelectorWithDefaults instantiates a new FieldSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldSelectorWithDefaults() *FieldSelector {
	this := FieldSelector{}
	return &this
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *FieldSelector) GetMatchExpressions() []DatabasequotaspecScopeFieldselectorMatchExpressions {
	if o == nil || IsNil(o.MatchExpressions) {
		var ret []DatabasequotaspecScopeFieldselectorMatchExpressions
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldSelector) GetMatchExpressionsOk() ([]DatabasequotaspecScopeFieldselectorMatchExpressions, bool) {
	if o == nil || IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *FieldSelector) HasMatchExpressions() bool {
	if o != nil && !IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []DatabasequotaspecScopeFieldselectorMatchExpressions and assigns it to the MatchExpressions field.
func (o *FieldSelector) SetMatchExpressions(v []DatabasequotaspecScopeFieldselectorMatchExpressions) {
	o.MatchExpressions = v
}

// GetMatchFields returns the MatchFields field value if set, zero value otherwise.
func (o *FieldSelector) GetMatchFields() map[string]string {
	if o == nil || IsNil(o.MatchFields) {
		var ret map[string]string
		return ret
	}
	return *o.MatchFields
}

// GetMatchFieldsOk returns a tuple with the MatchFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldSelector) GetMatchFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.MatchFields) {
		return nil, false
	}
	return o.MatchFields, true
}

// HasMatchFields returns a boolean if a field has been set.
func (o *FieldSelector) HasMatchFields() bool {
	if o != nil && !IsNil(o.MatchFields) {
		return true
	}

	return false
}

// SetMatchFields gets a reference to the given map[string]string and assigns it to the MatchFields field.
func (o *FieldSelector) SetMatchFields(v map[string]string) {
	o.MatchFields = &v
}

func (o FieldSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if !IsNil(o.MatchFields) {
		toSerialize["matchFields"] = o.MatchFields
	}
	return toSerialize, nil
}

type NullableFieldSelector struct {
	value *FieldSelector
	isSet bool
}

func (v NullableFieldSelector) Get() *FieldSelector {
	return v.value
}

func (v *NullableFieldSelector) Set(val *FieldSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldSelector(val *FieldSelector) *NullableFieldSelector {
	return &NullableFieldSelector{value: val, isSet: true}
}

func (v NullableFieldSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


