// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for DatabaseStatusModelState.
const (
	DatabaseStatusModelStateAvailable DatabaseStatusModelState = "Available"
	DatabaseStatusModelStateCreating  DatabaseStatusModelState = "Creating"
	DatabaseStatusModelStateDeleting  DatabaseStatusModelState = "Deleting"
	DatabaseStatusModelStateExpired   DatabaseStatusModelState = "Expired"
	DatabaseStatusModelStateFailed    DatabaseStatusModelState = "Failed"
	DatabaseStatusModelStateModifying DatabaseStatusModelState = "Modifying"
	DatabaseStatusModelStateStopped   DatabaseStatusModelState = "Stopped"
	DatabaseStatusModelStateStopping  DatabaseStatusModelState = "Stopping"
)

// Defines values for ErrorContentCode.
const (
	CONCURRENTUPDATE ErrorContentCode = "CONCURRENT_UPDATE"
	HTTPERROR        ErrorContentCode = "HTTP_ERROR"
)

// Defines values for JsonPatchOperationOp.
const (
	Add     JsonPatchOperationOp = "add"
	Copy    JsonPatchOperationOp = "copy"
	Move    JsonPatchOperationOp = "move"
	Remove  JsonPatchOperationOp = "remove"
	Replace JsonPatchOperationOp = "replace"
	Test    JsonPatchOperationOp = "test"
)

// Defines values for ProjectStatusModelState.
const (
	ProjectStatusModelStateAvailable ProjectStatusModelState = "Available"
	ProjectStatusModelStateCreating  ProjectStatusModelState = "Creating"
	ProjectStatusModelStateDeleting  ProjectStatusModelState = "Deleting"
	ProjectStatusModelStateExpired   ProjectStatusModelState = "Expired"
	ProjectStatusModelStateFailed    ProjectStatusModelState = "Failed"
	ProjectStatusModelStateModifying ProjectStatusModelState = "Modifying"
	ProjectStatusModelStateStopped   ProjectStatusModelState = "Stopped"
	ProjectStatusModelStateStopping  ProjectStatusModelState = "Stopping"
)

// DatabaseCreateUpdateModel defines model for DatabaseCreateUpdateModel.
type DatabaseCreateUpdateModel struct {
	// DbaPassword The password for the DBA user. Can only be specified when creating a database.
	DbaPassword *string `json:"dbaPassword,omitempty" tfsdk:"dba_password"`

	// Labels User-defined labels attached to the resource that can be used for filtering
	Labels      *map[string]string `json:"labels,omitempty" tfsdk:"labels"`
	Maintenance *MaintenanceModel  `json:"maintenance,omitempty" tfsdk:"maintenance"`

	// Name The name of the database
	Name string `json:"name" tfsdk:"name"`

	// Organization The organization that the database belongs to
	Organization string `json:"organization" tfsdk:"organization"`

	// Project The project that the database belongs to
	Project    string                   `json:"project" tfsdk:"project"`
	Properties *DatabasePropertiesModel `json:"properties,omitempty" tfsdk:"properties"`

	// ResourceVersion The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string              `json:"resourceVersion,omitempty" tfsdk:"-"`
	RestoreFrom     *RestoreFromModel    `json:"restoreFrom,omitempty" tfsdk:"restore_from"`
	Status          *DatabaseStatusModel `json:"status,omitempty" tfsdk:"status"`

	// Tier The service tier for the database. If omitted, the project service tier is inherited.
	Tier *string `json:"tier,omitempty" tfsdk:"tier"`
}

// DatabaseModel defines model for DatabaseModel.
type DatabaseModel struct {
	// Labels User-defined labels attached to the resource that can be used for filtering
	Labels      *map[string]string `json:"labels,omitempty" tfsdk:"labels"`
	Maintenance *MaintenanceModel  `json:"maintenance,omitempty" tfsdk:"maintenance"`

	// Name The name of the database
	Name string `json:"name" tfsdk:"name"`

	// Organization The organization that the database belongs to
	Organization string `json:"organization" tfsdk:"organization"`

	// Project The project that the database belongs to
	Project    string                   `json:"project" tfsdk:"project"`
	Properties *DatabasePropertiesModel `json:"properties,omitempty" tfsdk:"properties"`

	// ResourceVersion The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string              `json:"resourceVersion,omitempty" tfsdk:"-"`
	RestoreFrom     *RestoreFromModel    `json:"restoreFrom,omitempty" tfsdk:"restore_from"`
	Status          *DatabaseStatusModel `json:"status,omitempty" tfsdk:"status"`

	// Tier The service tier for the database. If omitted, the project service tier is inherited.
	Tier *string `json:"tier,omitempty" tfsdk:"tier"`
}

// DatabasePropertiesModel defines model for DatabasePropertiesModel.
type DatabasePropertiesModel struct {
	// ArchiveDiskSize The size of the archive volumes for the database. Can be only updated to increase the volume size.
	ArchiveDiskSize *string `json:"archiveDiskSize,omitempty" tfsdk:"archive_disk_size"`

	// InheritTierParameters Whether to inherit tier parameters from the project if the database service tier matches the project.
	InheritTierParameters *bool `json:"inheritTierParameters,omitempty" tfsdk:"-"`

	// JournalDiskSize The size of the journal volumes for the database. Can be only updated to increase the volume size.
	JournalDiskSize *string `json:"journalDiskSize,omitempty" tfsdk:"journal_disk_size"`

	// ProductVersion The version/tag of the NuoDB image to use. For available tags, see https://hub.docker.com/r/nuodb/nuodb-ce/tags. If omitted, the database version will be inherited from the project.
	ProductVersion *string `json:"productVersion,omitempty" tfsdk:"product_version"`

	// TierParameters Opaque parameters supplied to database service tier.
	TierParameters *map[string]string `json:"tierParameters,omitempty" tfsdk:"tier_parameters"`
}

// DatabaseStatusModel defines model for DatabaseStatusModel.
type DatabaseStatusModel struct {
	// CaPem The PEM-encoded certificate for SQL clients to verify database servers
	CaPem *string `json:"caPem,omitempty" tfsdk:"ca_pem"`

	// Message Message summarizing the state of the database
	Message *string `json:"message,omitempty" tfsdk:"message"`

	// Ready Whether the database is ready
	Ready *bool `json:"ready,omitempty" tfsdk:"ready"`

	// Shutdown Whether the database has shutdown
	Shutdown *bool `json:"shutdown,omitempty" tfsdk:"shutdown"`

	// SqlEndpoint The endpoint for SQL clients to connect to
	SqlEndpoint *string `json:"sqlEndpoint,omitempty" tfsdk:"sql_endpoint"`

	// State The state of the database:
	//   * `Available` - The database is ready to accept SQL connections
	//   * `Creating` - The database is being created and not yet available
	//   * `Modifying` - The database is being modified
	//   * `Stopping` - Shutdown is in progress for this database
	//   * `Stopped` - The database has been stopped
	//   * `Expired` - The database has expired
	//   * `Failed` - The database has failed to achieve a usable state
	//   * `Deleting` - The database has been marked for deletion, which is in progress
	State *DatabaseStatusModelState `json:"state,omitempty" tfsdk:"state"`
}

// DatabaseStatusModelState The state of the database:
//   - `Available` - The database is ready to accept SQL connections
//   - `Creating` - The database is being created and not yet available
//   - `Modifying` - The database is being modified
//   - `Stopping` - Shutdown is in progress for this database
//   - `Stopped` - The database has been stopped
//   - `Expired` - The database has expired
//   - `Failed` - The database has failed to achieve a usable state
//   - `Deleting` - The database has been marked for deletion, which is in progress
type DatabaseStatusModelState string

// ErrorContent defines model for ErrorContent.
type ErrorContent struct {
	// Code Application-level error code that describes how the error should be handled and how the `detail` field should be interpreted:
	//   * `HTTP_ERROR` - The error should be handled based on the HTTP status code (`status`) of the response according to RFC-9910, and `detail` should be interpreted as a human-readable string.
	//   * `CONCURRENT_UPDATE` - A concurrent update caused the `PUT` or `PATCH` request to fail. A `PUT` request can be retried after using `GET` to obtain the latest resource version and applying the desired change to it. A `PATCH` request can be retried without any changes to the request content.
	Code *ErrorContentCode `json:"code,omitempty"`

	// Detail Detail about the error
	Detail *string `json:"detail,omitempty"`

	// Status HTTP status code and reason
	Status *string `json:"status,omitempty"`
}

// ErrorContentCode Application-level error code that describes how the error should be handled and how the `detail` field should be interpreted:
//   - `HTTP_ERROR` - The error should be handled based on the HTTP status code (`status`) of the response according to RFC-9910, and `detail` should be interpreted as a human-readable string.
//   - `CONCURRENT_UPDATE` - A concurrent update caused the `PUT` or `PATCH` request to fail. A `PUT` request can be retried after using `GET` to obtain the latest resource version and applying the desired change to it. A `PATCH` request can be retried without any changes to the request content.
type ErrorContentCode string

// ItemListString defines model for ItemListString.
type ItemListString struct {
	Items *[]string `json:"items,omitempty"`
}

// JsonNode defines model for JsonNode.
type JsonNode struct {
	union json.RawMessage
}

// JsonNode0 defines model for .
type JsonNode0 = map[string]interface{}

// JsonNode1 defines model for .
type JsonNode1 = string

// JsonNode2 defines model for .
type JsonNode2 = float32

// JsonNode3 defines model for .
type JsonNode3 = bool

// JsonPatchOperation defines model for JsonPatchOperation.
type JsonPatchOperation struct {
	From  *string              `json:"from,omitempty"`
	Op    JsonPatchOperationOp `json:"op"`
	Path  string               `json:"path"`
	Value *JsonNode            `json:"value,omitempty"`
}

// JsonPatchOperationOp defines model for JsonPatchOperation.Op.
type JsonPatchOperationOp string

// MaintenanceModel defines model for MaintenanceModel.
type MaintenanceModel struct {
	// ExpiresAtTime The time at which the project or database will be disabled
	ExpiresAtTime *time.Time `json:"expiresAtTime,omitempty" tfsdk:"expires_at_time"`

	// ExpiresIn The time until the project or database is disabled, e.g. `1d`
	ExpiresIn *string `json:"expiresIn,omitempty" tfsdk:"expires_in"`

	// IsDisabled Whether the project or database should be shutdown
	IsDisabled *bool `json:"isDisabled,omitempty" tfsdk:"is_disabled"`
}

// ProjectModel defines model for ProjectModel.
type ProjectModel struct {
	// Labels User-defined labels attached to the resource that can be used for filtering
	Labels      *map[string]string `json:"labels,omitempty" tfsdk:"labels"`
	Maintenance *MaintenanceModel  `json:"maintenance,omitempty" tfsdk:"maintenance"`

	// Name The name of the project
	Name string `json:"name" tfsdk:"name"`

	// Organization The organization that the project belongs to
	Organization string                  `json:"organization" tfsdk:"organization"`
	Properties   *ProjectPropertiesModel `json:"properties,omitempty" tfsdk:"properties"`

	// ResourceVersion The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string `json:"resourceVersion,omitempty" tfsdk:"-"`

	// Sla The SLA for the project. Cannot be updated once the project is created.
	Sla    string              `json:"sla" tfsdk:"sla"`
	Status *ProjectStatusModel `json:"status,omitempty" tfsdk:"status"`

	// Tier The service tier for the project
	Tier string `json:"tier" tfsdk:"tier"`
}

// ProjectPropertiesModel defines model for ProjectPropertiesModel.
type ProjectPropertiesModel struct {
	// ProductVersion The version/tag of the NuoDB image to use. For available tags, see https://hub.docker.com/r/nuodb/nuodb-ce/tags. If omitted, the project version will be resolved based on the SLA and cluster configuration.
	ProductVersion *string `json:"productVersion,omitempty" tfsdk:"product_version"`

	// TierParameters Opaque parameters supplied to project service tier.
	TierParameters *map[string]string `json:"tierParameters,omitempty" tfsdk:"tier_parameters"`
}

// ProjectStatusModel defines model for ProjectStatusModel.
type ProjectStatusModel struct {
	// CaPem The PEM-encoded certificate for SQL clients to verify database servers within the project
	CaPem *string `json:"caPem,omitempty" tfsdk:"ca_pem"`

	// Message Message summarizing the state of the project
	Message *string `json:"message,omitempty" tfsdk:"message"`

	// Ready Whether the project is ready
	Ready *bool `json:"ready,omitempty" tfsdk:"ready"`

	// Shutdown Whether the project and all of its databases have shutdown
	Shutdown *bool `json:"shutdown,omitempty" tfsdk:"shutdown"`

	// State The state of the project:
	//   * `Available` - The project is available
	//   * `Creating` - The project is being created and not yet available
	//   * `Modifying` - The project is being modified
	//   * `Stopping` - Shutdown is in progress for this project
	//   * `Stopped` - The project and its databases have been stopped
	//   * `Expired` - The project and its databases have expired
	//   * `Failed` - The project has failed to achieve a usable state
	//   * `Deleting` - The project has been marked for deletion, which is in progress
	State *ProjectStatusModelState `json:"state,omitempty" tfsdk:"state"`
}

// ProjectStatusModelState The state of the project:
//   - `Available` - The project is available
//   - `Creating` - The project is being created and not yet available
//   - `Modifying` - The project is being modified
//   - `Stopping` - Shutdown is in progress for this project
//   - `Stopped` - The project and its databases have been stopped
//   - `Expired` - The project and its databases have expired
//   - `Failed` - The project has failed to achieve a usable state
//   - `Deleting` - The project has been marked for deletion, which is in progress
type ProjectStatusModelState string

// RestoreFromModel defines model for RestoreFromModel.
type RestoreFromModel struct {
	// Backup The name of the backup to restore the database from. If a fully-qualified name is not supplied, then the organization, project, or name of the database being created is assumed.
	Backup *string `json:"backup,omitempty" tfsdk:"backup"`
}

// GetAllDatabasesParams defines parameters for GetAllDatabases.
type GetAllDatabasesParams struct {
	// LabelFilter Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
	// * `key` - Only return resources that have label with specified key
	// * `key=value` - Only return resources that have label with specified key set to value
	// * `!key` - Only return resources that do _not_ have label with specified key
	// * `key!=value` - Only return resources that do _not_ have label with specified key set to value
	LabelFilter *string `form:"labelFilter,omitempty" json:"labelFilter,omitempty"`

	// ListAccessible Whether to return any accessible sub-resources even if the current user does not have access privileges to list all resources at this level
	ListAccessible *bool `form:"listAccessible,omitempty" json:"listAccessible,omitempty"`
}

// GetOrganizationDatabasesParams defines parameters for GetOrganizationDatabases.
type GetOrganizationDatabasesParams struct {
	// LabelFilter Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
	// * `key` - Only return resources that have label with specified key
	// * `key=value` - Only return resources that have label with specified key set to value
	// * `!key` - Only return resources that do _not_ have label with specified key
	// * `key!=value` - Only return resources that do _not_ have label with specified key set to value
	LabelFilter *string `form:"labelFilter,omitempty" json:"labelFilter,omitempty"`

	// ListAccessible Whether to return any accessible sub-resources even if the current user does not have access privileges to list all resources at this level
	ListAccessible *bool `form:"listAccessible,omitempty" json:"listAccessible,omitempty"`
}

// GetDatabasesParams defines parameters for GetDatabases.
type GetDatabasesParams struct {
	// LabelFilter Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
	// * `key` - Only return resources that have label with specified key
	// * `key=value` - Only return resources that have label with specified key set to value
	// * `!key` - Only return resources that do _not_ have label with specified key
	// * `key!=value` - Only return resources that do _not_ have label with specified key set to value
	LabelFilter *string `form:"labelFilter,omitempty" json:"labelFilter,omitempty"`

	// ListAccessible Whether to return any accessible sub-resources even if the current user does not have access privileges to list all resources at this level
	ListAccessible *bool `form:"listAccessible,omitempty" json:"listAccessible,omitempty"`
}

// DeleteDatabaseParams defines parameters for DeleteDatabase.
type DeleteDatabaseParams struct {
	// TimeoutSeconds The number of seconds to wait for the deletion to be finalized, unless 0 is specified which indicates not to wait
	TimeoutSeconds *int32 `form:"timeoutSeconds,omitempty" json:"timeoutSeconds,omitempty"`
}

// PatchDatabaseApplicationJSONPatchPlusJSONBody defines parameters for PatchDatabase.
type PatchDatabaseApplicationJSONPatchPlusJSONBody = []JsonPatchOperation

// GetAllProjectsParams defines parameters for GetAllProjects.
type GetAllProjectsParams struct {
	// LabelFilter Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
	// * `key` - Only return resources that have label with specified key
	// * `key=value` - Only return resources that have label with specified key set to value
	// * `!key` - Only return resources that do _not_ have label with specified key
	// * `key!=value` - Only return resources that do _not_ have label with specified key set to value
	LabelFilter *string `form:"labelFilter,omitempty" json:"labelFilter,omitempty"`

	// ListAccessible Whether to return any accessible sub-resources even if the current user does not have access privileges to list all resources at this level
	ListAccessible *bool `form:"listAccessible,omitempty" json:"listAccessible,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	// LabelFilter Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
	// * `key` - Only return resources that have label with specified key
	// * `key=value` - Only return resources that have label with specified key set to value
	// * `!key` - Only return resources that do _not_ have label with specified key
	// * `key!=value` - Only return resources that do _not_ have label with specified key set to value
	LabelFilter *string `form:"labelFilter,omitempty" json:"labelFilter,omitempty"`

	// ListAccessible Whether to return any accessible sub-resources even if the current user does not have access privileges to list all resources at this level
	ListAccessible *bool `form:"listAccessible,omitempty" json:"listAccessible,omitempty"`
}

// DeleteProjectParams defines parameters for DeleteProject.
type DeleteProjectParams struct {
	// TimeoutSeconds The number of seconds to wait for the deletion to be finalized, unless 0 is specified which indicates not to wait
	TimeoutSeconds *int32 `form:"timeoutSeconds,omitempty" json:"timeoutSeconds,omitempty"`
}

// PatchProjectApplicationJSONPatchPlusJSONBody defines parameters for PatchProject.
type PatchProjectApplicationJSONPatchPlusJSONBody = []JsonPatchOperation

// PatchDatabaseApplicationJSONPatchPlusJSONRequestBody defines body for PatchDatabase for application/json-patch+json ContentType.
type PatchDatabaseApplicationJSONPatchPlusJSONRequestBody = PatchDatabaseApplicationJSONPatchPlusJSONBody

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody = DatabaseCreateUpdateModel

// PatchProjectApplicationJSONPatchPlusJSONRequestBody defines body for PatchProject for application/json-patch+json ContentType.
type PatchProjectApplicationJSONPatchPlusJSONRequestBody = PatchProjectApplicationJSONPatchPlusJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectModel

// AsJsonNode0 returns the union data inside the JsonNode as a JsonNode0
func (t JsonNode) AsJsonNode0() (JsonNode0, error) {
	var body JsonNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonNode0 overwrites any union data inside the JsonNode as the provided JsonNode0
func (t *JsonNode) FromJsonNode0(v JsonNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonNode0 performs a merge with any union data inside the JsonNode, using the provided JsonNode0
func (t *JsonNode) MergeJsonNode0(v JsonNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJsonNode1 returns the union data inside the JsonNode as a JsonNode1
func (t JsonNode) AsJsonNode1() (JsonNode1, error) {
	var body JsonNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonNode1 overwrites any union data inside the JsonNode as the provided JsonNode1
func (t *JsonNode) FromJsonNode1(v JsonNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonNode1 performs a merge with any union data inside the JsonNode, using the provided JsonNode1
func (t *JsonNode) MergeJsonNode1(v JsonNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJsonNode2 returns the union data inside the JsonNode as a JsonNode2
func (t JsonNode) AsJsonNode2() (JsonNode2, error) {
	var body JsonNode2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonNode2 overwrites any union data inside the JsonNode as the provided JsonNode2
func (t *JsonNode) FromJsonNode2(v JsonNode2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonNode2 performs a merge with any union data inside the JsonNode, using the provided JsonNode2
func (t *JsonNode) MergeJsonNode2(v JsonNode2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJsonNode3 returns the union data inside the JsonNode as a JsonNode3
func (t JsonNode) AsJsonNode3() (JsonNode3, error) {
	var body JsonNode3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonNode3 overwrites any union data inside the JsonNode as the provided JsonNode3
func (t *JsonNode) FromJsonNode3(v JsonNode3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonNode3 performs a merge with any union data inside the JsonNode, using the provided JsonNode3
func (t *JsonNode) MergeJsonNode3(v JsonNode3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JsonNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JsonNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
