// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
