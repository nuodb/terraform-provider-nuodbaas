// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
