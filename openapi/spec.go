// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde3PcOHL/Kjgmf1g25yXJya2qUhutpPU5Wa8VS76rOkklYcgeDdYkQAOg5LF2Pla+",
	"QD5ZCi8SfMxDo7Use1nlcg3xYqPR6P41ukHdBRFLM0aBShHs3QUimkKK9c9DLPEYCzjggCW8z2Is4Q2L",
	"IVGVGWcZcElAN43H+BgLcct4rB9BRJxkkjAa7AWnU0CZrUUTxpGcAjr8aR/lAngfHWCKGE1maAxIZBCR",
	"CYEY3U6Boki9mdBrhFFsiekHYSBnGQR7gZCc0OsgDG45kfCWJrNgT/IcwuBTj6RpLvE4gbKI4Yz0IhbD",
	"NdAefJIc9yS+1uRHchbsqUlcOjqDMJhGSbNQTkT8oV4818PzGHiwt6t+y0mP4hSa3XWVACqIJDeWtnkY",
	"JHgMiaYExzFRbMPJcYXBGZYSuOLms2dn+71/4t7nYe+Hi7Ne8fuyf/F860evbqvBqXlYW5n3Angvhgmh",
	"ECNDBMJS4mgKMZJMLxQHwXIeAZJTLFGEqVqnXIBZyglJJNhleBiNbPwbRDJYa6Usv9waFY9udWyBvy47",
	"1XUpW6SYUAkU0wjUC/6VwyTYC/5lUG6Lgd0TgzdlU7MP5mFgxmsTeVWD2EQz0UlvhUtnuPf54sxy4nmL",
	"XG8mxpoixxr74BijH322bFu2kBioVDuPl28queW6MX6NKfmMzSzbJu23MBLjTx+NIWH0WiDJHoMTFXId",
	"R2qFjjOVYp9Dw7U4VO+ecabFuV0Zmsqvzh9HpGNN+ey44kp8hozWYojXs2oqlm0wZ3FK3VfsM6eG/g5c",
	"LJS+G1Ppdp3r00f/UNakNC6EIoyujt+fXiEOH3MQEmV4ljAch4jQmERYgiiXx4wDSExZnsRa/2ljGIcI",
	"0xgRYfTheKZbi5mQkCr1eZ1jHiN8jQkVEkWMRjnnQKXtLvqtK7lk2dyy9CoL8oNhj2QcfuYsXcXkd2XT",
	"grtCYpmvvTwnunXRWWoRaFsPAfyGKNNBgBeWv7Dk6PUEsZRIzUjp7YtKNyIQoVNQJj5WDINPOM0SrZWG",
	"fZHiJLkvF43wa6qd5NsHx1/96LP436rCbeo12z/mhEMc7J1VMFDoFG9N27hdcVE3e/OwgFsLIFaHETqM",
	"0GGEDiN0GKHDCPfHCH/tMMKXxggv18AIm6OCurg38AHm0ZTcwCERH07I5wX2RpDPhb2xHdANS/IURAvv",
	"D4wh14czVpqVyBIacVCaSLU2vfXAVc5vn5K6vVea6cWz8/O+/vV868et34unF1tbz56d/febV6fHRxdk",
	"6/czmqcfzNPWj5utnp3gZUzEh0tFYLGUbTVuXZt1bZreLnJrYyuKpwT4MeY4BQlcNNfjH1OQU+CGo7qH",
	"Eeas6IMmnKUVqSdVqFDdBSmW0VTrpKKDpz3GjCWAaftx2b31yc48DH5jOac4WV/ibIcvJXEvh6++tsjZ",
	"GbaIXFuNY22zrs2WWpFrbZxxFueRXMfwDSS+dgvya84Of0Ikxdeg2JyrJfiZcYRvMEkUUEBqeiESAGgq",
	"ZSb2BoNpPu7HLPoAvB+xdMAHNGfx2Pzfi0ANL5pqu5BYZ35vSZKopS70dkPY+9W1PBspP0Gv4u/e72Ix",
	"WwvLpX521r/sOXykfr7YdI0try/tTHxkVCv3EFKlZsl5cUtT2dAjixzAFZ7c2wx/zMHXLyLPsoSYPdaq",
	"U/qb+V6q62X5nooJrZb71tSvafM/PMNaaTrfiEbPenorWBZ5i+cK54218mragE/DSEf4GNL27Xl89KYH",
	"VFEco0j1mGiIqZXkyf/8gqKEKKClluoGOJnMqitm2Xl/cY7wZQZpwYPi0c3fFizRSGWLFITA1y2W4I2p",
	"QCJPU8zJZ0KvDQ6WaopNB3iDebh3u4mUz24mrmTJ9vOacMDxbInV9pUaEcg0b7G2a5Du+hrCi5Es2eZ5",
	"yYYoGohpLmN2S9ekeooFKrpsRrnX3RDvj2fpL4qWHLX4bcTH5IjGGSN0gWsMtrZta0SMUu02s82kSHxM",
	"Lt345aSqhcXE/OIlILHeTgv9ArTUth/2zilCz9HVvrPKV6iHTtvkT3EARxFk0vDFMIMwKuwQBzag2jbC",
	"GNSu1CFXiLXTSplEM5AlHLCjvGExmcyWDpOqJgRi2+NEsiyzHU7sWhuvTVn7aw7CoUEiitH8vhA33qXE",
	"dwzKZzcNbPOjT5nytlqbg6mzLX/GJFnQcKKrDDunBG4AYZQLjYj0EtkRDiGBVnYWtKWYf7DHoLFuzGiI",
	"bqckmtamb0c0jrcd0nrhBhmNcfQhz1YyTSFimqfK2SzkJQgDt/BBGBSrF4SBWxf3E+IgDCwHgzAwHArC",
	"wE00CIOCQs9dvdcO09JfbC37VOwp/bzErbYNrIL2vZgNMIA90vCJyUWNmrxh98vSI84ZP2BUgtFVNWPP",
	"4pZtvq8gV6Rd/14CN5AgUKMg1docJ5n2YxBoym61JjAtyqOlKaZxYjepa3MVg8QkuUITAknsNSZUAs84",
	"SIidJvnb6enx5dG7d2/fOcld9AYlUjHS57SAVDdkZm/IfXZlnq62vOO0jFEBSg0xHms7z9C7nw96P/ww",
	"GpqzsILSVhoRFgijaZ5i2lNLbDedErC+02Jvfz14/+7d0a+nl++PD/dPj9Qs9puHZyjC+tBNs0ef5DGO",
	"ro73Tw/+Vh7qSaZ3ex/t1077bBiDg+QKIuOJBI5yoaZ09ero9Er1ZGOJiWFOgqXqVYRCnKOjZoyzLJk5",
	"zBODUNsLRVNMjd9FpHl7lbDa+2+JnLJcIkxntqsowy+2h5HEvqcDypVWSqDOtwVb2Fox7UColWoK8aEu",
	"R3isKCokNFgy2nblBLE6WkOuFM+Uw8/osiFHTeQ/D4PXEtJfiJAnpn1jVxIJafVHw22yBZhzPAtaX/Jf",
	"gtFf7fZmFN5Ogr2zu0az5tBFCc3TsT4/vKvjrvnFgvcdYxlN32bAi9BKdWITe65b+syD/vPl/AsDlqku",
	"TlpwrJQ9h5TdgP6RJThSv2xBxDKNTEHIlaKTYTm9FzlKQm5wkq8MsRXMr5+usiyw723jYSMy1+CggQdi",
	"X56SRQE7SVJAWFoT7h/NKQvvzL873IiJxgxx9WB0uL3bG456w9HpcLin//0zCIMJ4ymWwV6gNFdPvaeV",
	"Wdest4HRtTO7xPLSjmwsXrPcmb56zRJ829LUFr2mS7iYU0mShSxUkMZyL0TQv+6jq1F8VWHkKK6eEJ2f",
	"xy+2zs/FcxdZ/r//vXixtZkf4OZEaINXhLawidBlHnK1FRGHTi6WOmptbClN5gM9NyIuPek0M6yWuSn6",
	"pUu80EqzzY5k/DB74cZXygpX3iutobNa1bFhYpdU8bWSKra/alJFGa5+WjkVo0fJqXAa5M+UUrFmGoHV",
	"C10WwX2ifv+uQHyC21ly8st+EdFzIRx0gCll0psIYjSCakxTuEOnajgvhps/TCQV0YWXr38XLn6Clx5M",
	"mur1ch+sTD0s9aHUWF8li2F34ywGy1fVoQ1+L9hwDZP85EOZTm7rkUy1d5Ob+pmJ2hVq60ZJLiRwtTcn",
	"5Do3TtyfI8Q5eiohzrbcoScR4Rx+ExHOFvX2uAFOfQZmj9u8PMRHiXkOv0zM80HT2CzkufOQkKdntB8z",
	"4jl6UMTTEa2PYpNE8Z7IMmQi0BTfwFcLhW4vCYWuGSm0E1wYKPRWrR7Lq0cEvaYPCAg2RnlIPNAO1h4O",
	"9Ne2ZVFXBwhXDLAsZOi6PiBi6A9xv4DhFw70PU5wb/cJB/caOdANY2dCsqsPIWzoVjJkU7CreRgTzlIN",
	"MzGa5Eky633McWLcRz0KEXrjOSSjUagxgj4CD50shYjx1osltQ2tlIEQeVr3u3CUwsBYBUKvBzGkbLA9",
	"3N4djoaj0fZwOBzWUGvlFGGwdTcMd+bPHGKtVG79YQ6dZb1b3OLRLa4tWGLBXYvNsJVdyEsddCntWKWw",
	"NGde8bxuyfw6pfIhyjmRsxPlUzoxEyTaz004RfuaqudP+yevD0p+Kp9GDT4GzIE3Wx/tvzt6V28+19nK",
	"E2ai1VRicxsFUh30C7RP1T/Js4xx+Z87sVBuUhAGOU/sEMqL0u6SrmnAceOUHTAqOUvQcYIpoGcHx1vK",
	"CrNbfZjBTdqOlkmtg1NMFWoyXUtlzCFlEpKZjcBi5PLtTLz4xEL6Z4c/YXyypewNJBrbA0/F24mt98iO",
	"WdQvSLeen4nhDjgkgAX0KJMgrDuYkAiogJ4eb6AdXam3S9sc3x2dnKL949dBGDgvZy/Y7u/2h/o0LwOK",
	"MxLsBTv9YX9kY1Z6qQdGKtXveVg8De78jT5fWjm4s2pg3WaDO8fkDXoM7kxj19V6uQPX4GPOJBZLKwd3",
	"aivUB5hCkk4Ay5yDWFLV3tn6d8qNEkuqqp0LUVPrcA16IzAXbX0dB3vBK5D7SXJYtFPrVvqsZ3UrcMDS",
	"FPcEqEZK3yZESKWSzcm9FnudF1CeF5izcWfuMQekD5lUrc072P/18KqP9nWKl8YWZjCFUhQmIIwK1W/v",
	"nD5HVx9gpmCGMqOIg8w5Lc4p7ZGjRjj6rdq18s4tP8DMjfEfOij7kJGQAJ1noQfSw/5lNW0xQ5eUycv1",
	"iPzLWlSuN2aF3EBpyGAv+JgDn7l7vTaM8bNmfhDaj6a0nE/MwyW3PiyNmM500p4QRKPFfNwryYYboO7W",
	"R3GmK4CjmIGBBXoqpj/KOLkhCdjUEC1wyt8ph9PHzEQgnXi0aGpEyP2CnsrsYpjgPJHB3gQnAhp+0nx+",
	"oY/PdQaQ3kfbw6GzLTZFCpfpT4PfhDngK1+w7HS1ltihjVcTd7ldVlqOWywsq00Ac/cPpKmSALaAIr1c",
	"7vBfEUPoDU6IpWX0+LTExHhyGWc3JFZKhnPtAeUKWEr7dmWTdewFm3Dd7nDn8UlV7FKkKtIYJ5+dh6Wl",
	"3Ut9grgQckXry0dc4n17OmVT6Fikt2lcAXPaOngw7uyiCtTOLtTOMQdFCl0qMa9Ad+35aR1g7JjCHxqP",
	"ngWl3bqYV+xYEzUsNGtvvYZL7JvWFjq/plAWtRhAGSUwSP4eirEzl5257MxlZy47c9mZyz/EXGKK6kkn",
	"9zSZFV96ofF8PIPZMlwZP+pMb2d6O9Pbmd7O9H5Lpnd3uPuotLp4Y7Ep4RMR8jsGAX6Gxcbmv3pGHujA",
	"LDTBgA6ewqH/HbdvAw60jOTdJ30AstCRUH3VSWk6ARGjsdb4t5jI8vsvNtCtKsYKKVCcqB0Uopwmav8M",
	"ERGVb0PrcHiRPqvk2I65wFJIkgLL5YkhoN1SDL07OITKne0gDFJCSZqnutJOllAJ1zopsmlCdttjweW9",
	"ICzMZDv93un3L0JrIWpNBb87/OvXIcWxzkq+n8VX7mm7Q78HS2TMgPI/Ne+VO+R/2qTFCoUrncs/oTH5",
	"kgi9+q3ddQR4wnLaKe1OaT+y0v7WdeErkPdThBmW0bSpCvXl9z+7MtSy+hMzOdpLRKKnmfjCSYdN7dNK",
	"VEtTuTwH5hsUhQDa20H2Gn5wdk4RulP/IXQesOw82EPnAY7j8yB0pWpypnygens15hBNV9GRucB0HqjK",
	"+Tm9UMI9qhLz2n3lMSbig/lw5MS/+2w/tik2J7BM3xzUPpfaTvZoOHxFqjRvV2k+Aelxj9l04c0p9C7F",
	"tpFkB1JlxRV7S2ps6NSUluTuVMm1F8/9bfjFCS2vu6sKJegtdO5W6Tyi9yPTfLJiDUrLd8797VZ8C2TV",
	"dydqH+FofixkXt/V83YY0/YnkmQ01SYLl1eWKt/F69BHhz4e2WX84euQEunrz7Wbw3FurnZS+JRBpEqK",
	"CwW7o5ePCJNSiAlGauMjZi8ZYYqulpjhKy0MLoNfU7y9/YRYOwb9qSxEJLrV9fApAogRLr9CobN1vwdI",
	"av6Q3T1Rad7inpu/i9eB0vVA6Sokam4AtFh8bezPAwMuNZgcOjAZmirvL++YFub7aK9l0aIEfh44OQ8a",
	"IFB1fqkxX4Ekal85t208WDhvgbK12ZjQrT1pRpVLuLVZLpmKfVMNgFppXsw3X+QspotS8DmjL9fpmuLW",
	"T1GtxMPUxZCyothbjFFtMe7Daouvl/N6VGJw+4raFzpMs53hy+GO5VIF261zDtT8E5cPQXKVgyOrYvXS",
	"GcC0ooO9n9WhvQ7tPRoOcHcCHQ6QC0PF+nbhKgzxVJGkmybj3yyofKpIsoW1fyZQaQ1+MXvvLxYvyTyY",
	"Ak7k9LO9gZawa4XM9G+7+VZdRjt2zbq7aF2GX5fh90Qz/Nxm7hL8utz6bzatrhDihTfRCptljJt7vMc9",
	"tMXmrLt61lnHzjp21rGzjp11fOrWcfHFs/UsZPXa2fJk82Pv+9bf4tWzLkHcv5XR5Yd3x79f6/7PY6eH",
	"+zJ/n+zwxz5JdnRWTjsdsd4R5xR73478TtPYm3epPIsWrnLrvhUj9SWhceXPkayxM7q0884WdHdBH5p1",
	"vkJvLcs5/xZ11xfLE3cS88XSxIdrpImfgCwJeXoZ19vtGdflYj6NhOud1oTrdan8rvOtHRM6q9tZ3cf1",
	"wJ6AZ/NdJlt/hynLqyDN4oTl7xnRrJdk3LRyNldWJNglu9605boO+xRTVqTijlpTcReOviITt0y1babh",
	"riasmoT7x2XINh3WTc2t59WukxPrt+9SYjuL/JXs4JPKam2l9LtMav0O80GXWux5GAz0X8Ow+Z/6d/vf",
	"fWirGtypUt1CE63/XJqm2fytjrs71P+7skaiH2WHLOqbJu95gubzYH4x//8AAAD//+h2PsQHpAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
