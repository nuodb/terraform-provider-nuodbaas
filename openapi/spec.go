// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
