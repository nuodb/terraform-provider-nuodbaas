// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2Gj4ESlocjGKaRbdfLr5/wEAAP//algXEralAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
