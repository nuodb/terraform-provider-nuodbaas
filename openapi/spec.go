// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
