// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde1MbuZb/Krq9+wckfkFI1Y6rtmYdILnZnSQskHurBiiQu49tDd1SR1KbOIw/1n6B",
	"/WS39Oq3H5iEANNVqZRpPfro6Oj8zkv2reezKGYUqBRe/9YT/gQirD8eYImHWMA+ByzhcxxgCR9YAKFq",
	"jDmLgUsCumswxEdYiBvGA/0nCJ+TWBJGvb53OgEU21Y0YhzJCaCDNwOUCOAdtI8pYjScoSEgEYNPRgQC",
	"dDMBinz1ZkLHCKPAEtPxWp6cxeD1PSE5oWOv5d1wIuETDWdeX/IEWt7XNomiROJhCNkjhmPS9lkAY6Bt",
	"+Co5bks81uTLkQiuvb5axqWj1JurQXLUpjiCcpttEkAFkWRq3zJveSEeQqjnxEFAFANweFRgVYylBK74",
	"srV1Nmj/jtvfeu1fLs7a6efLzsWL7V9zbduVNc9bJR5/FsDbAYwIhQAZIhCWEvsTCJBkmuUcBEu4D0hO",
	"sEQ+porjiQCzKSMSSrAMvR+NbPgH+NJbk+eWYyVuZ08jTKgEiqkPati/cxh5fe/fupnYdq3Mdj9kXY2c",
	"zluema9OJFULYiPNGiddhbWf4fa3izO7vhc1crepmGma3IJJAFQqmefZHBkfXFfGx5iSb9jQX7ecfA+z",
	"w/mFoSGEjI4Fkuxh1lggeL21lofEnGlBqlcopvERrNSRud4ic72LKnSZYDtNnGmSVL7dof4HcLFQNqam",
	"0Um7G9NB/1RaNlO6hCKMro4+n14hDl8SEBLFeBYyHLQQoQHxsQSRsdzMA0hMWBIGWptokAhaCNMAEWG0",
	"y3Cme4uZkBApZTROMA8QHmNChUQ+o37COVBph4tO7e6ssRVtb25YIhmHt5xFqxh7nHVNOSoklsnaW3Ki",
	"e6eDpd72uj0QwKdEKV8CPEXBFNXQ+xFiEZGaeTIn34VhRCBCJ6DgLlBMgq84ikOtJ3odEeEw3JRzmu6S",
	"DjbPNEO/JIRD4PXPCkhvtWtJO2UH96IMCfNWalQsMCQa/Gzws8HPBj8b/Gzw81ni5+aIWRbeCnZi7k/I",
	"FA6IuD4h3xZobUG+pVrbDkBTFiYRiBqu7huQ0+65lU0lgIQqz1yA7m1G64mLPN09JWUsVLrj5db5eUd/",
	"erH96/af6V8vt7e3ts7+58O706PDC7L95xlNomvz1/avm+6LXeJlQMT1pSKxvEm1HayQnBLgR5jjCCRw",
	"UeXnPycgJ8ANR/QII2ZxOgaNOIsK8kiKgFmUzwhLf6I1RDogd5aHjIWAaX3AY+3T/QdLOMXh+lJiB/wo",
	"KXnde/fzxcSucbGY1HaIOQsSX64DHV2Jx46hHxN28AaRCI9BsSlRLHzLOMJTTEIFn0iR10ICAE2kjEW/",
	"250kw07A/GvgHZ9FXd6lCQuG5v+2D2p6UVWCqZQ5ALshYai2KtWCFQHtFPfibEfZrXoX/sx9Tjej9mG2",
	"VVtnncu2sxrUx5eb75Hl9qVdS3mHappl5fwucipWeAefYvwlgfy5Fkkch8TIee1Z7mxqz6vBl9mb6kCl",
	"0Dzf8D057KhyMtdSB9QV6PHxEUT1B+Do8EMbqKIlQL4aMdJmkFYjJ//7G/JDogwDxcgpcDKaFfmp1rih",
	"wPj4MoaovLrsaQRC4HGNBvxgGpBIoghz8o3QsbHApCK86vJsRJ17e4m83GMOOJgtQZ38AScCme41aLEW",
	"OWZ0iZj0oZgkMmA3dE1qJligdMimFKUTlIjKPxdfwkMaxIzQBW4O2NY6cfMZpdoFYpvuofgSXro3VMgs",
	"tWnhWYC2dXLVP6cIvUBXA4cKV6iNTuv2XK0F+z7E0qzQLIswKuwU+zaNUjfDEJR060QLBNrtoEyiGcgM",
	"juwsH1hARrOl00SqC4HAjjiRLI7tgBO7a8YGV2gz5iCcNUFEOlt+LASVdynRGoLyukwH2/3wa6ws7Nru",
	"YNpsz7eYhAs6jnSTYeeEwBQQRonQiKy3yM5wACHUsjOlLcL82oaFAt2Z0Ra6mRB/Ulq+soRoEinHIN1n",
	"r+W5DfNaXsp1r+U5frqPEHgtz67ca3lmZV7LcwTm3Ik7yrWW1bJAm4dWMeWtz43wx7qJNS8xTw85Z3yf",
	"UQnmbJcAhwU1h2mgQNnXTlU7hCmECNQsSPU2brfpPwSBJuxGnzfTI3PBJ5gGoT0Krs9VABKT8AqNCIRB",
	"rjOhEnjMQULgzuvfT0+PLg+Pjz8dO/lY9AYlMwHS0SZAahgyqzfkbl2Zv662c2GHmFEB6rAzHmhUYuj4",
	"7X77l192eiZmkFJaSyPCAmE0SSJM22oTrWgr0eg4XfHp4/7n4+PDj6eXn48OBqeHahWDapAB+VgHJzR7",
	"dMSDcXR1NDjd/3sW/JBMn6kOGpSiIjZ4ykFyZUThkQSOEqGWdPXu8PRKjWRDiYlhToilGpUGYJ05q1aM",
	"4zicOYQOQKjDgPwJpsa6JtK8vUhY6f03RE5YIhGmMztUZEFfO8JIYid3YrOdVke2zLfq4dNmpdqdquAe",
	"6OcIDxUVqVTWha2z6Epxhor8KN4o94vR6jTzmjDDewnRb0TIE9OncuKIhKj4oUKbfYA5x7P6l/y3YPSj",
	"PbqMwqeR1z+7rXSrTp0+oUk01JGW27JVMb9Y8L4j5VR/ioGnwd/iwkY2zpV5Pd3OizrWs1h1c7uPA6Vq",
	"OURsCvpDHGJffbIPfBZrawyErBWFGMvJWq+d4jBZGbpPGVuON7HYs++q408l4l/hjgFPMZCnZFEiQJII",
	"EJYW4PLBDoV/Dhyd6xkQjahBMVTU291r93bavZ3TXq+v//3utbwR4xGWXt9TGqet3rOppWaXcYnlpZ6m",
	"BDs1zfbRe7pk0QmVJFy4YmXU2MW2EHTGHXS1E1wV1r0TFN3t8/Pg5fb5uXjh0kb//38XL7fvu2hCF63X",
	"tBBx4DZlqX1ft8gMZ+5t8BNxmQpHid5C06Yebz4TVva6ik1HZqFNjvI55ShdjP25pSjdqXyaGco1M3j2",
	"RDYJvHVC/CLE9Ww4+W2Qhu9dvBftY6pc/ox4xKgPxaSFcBGCYuw+gOl3FChFdtkdNI/WSylaGblfRjHT",
	"Eo8mOaiYYNdRZ8MtOBoV2Hr02QonbeVkhTpl4bTsMCtZVofMDxOhvEef0REZJ8bKb7IYd85i1CXMn00S",
	"o0Y1PGwOQ4cYbDQjUzGPMK1xT+K+S1YjBzs/P6nhiNGxpjBUfCIyC1cLNMFTeKBsx5opBEvywgxCjr/l",
	"IH85VZDreo9MQWWW+yQK7GT1eYL8btVs0+rMwYoJluUS3NB7pBLyUzSZhO+USagUqVVU/xD710m82oU0",
	"/dSu2hq5YtpzxFmkzRqMRkkYztpfEhwax0LPQoQ+Mg51tdVjICFv8bWcFLQQ47VVtqWjqI6xEElUts6x",
	"H0HXaF5Cx90AItbd7e3u9XZ6Ozu7vV6vV7KSCp5id/u213o133IWUqFx+zua/Zb5pe1zTze1DOwGXero",
	"bgUB8m1KsYKfcCJnJ8qTcCIhiD9ITIxWexhq5JvByfv9bO3K3lWTDwFz4NXeh4Pjw+Ny97kuMBsxk8ai",
	"EpsSXYh0ZsDT9nbnJIljxuV/vQqEMqG9lpfw0E6hLGxtSuuWiplnDPZ9RiVnIToKMQW0tX+0rdCL3WiX",
	"lJv8t5YfrekiTJVlYIZmKo9DxCSEM5uawcgVg5hE0ok1FbcO3mB8sq20OoTaZgQeiU8j254jO2B+JyXd",
	"egUmudPlEAIW0KZMgrCuQkh8oALaer6udoKkFu26NR4fnpyiwdF7r+U567nv7Xb2Oj0TvAeKY+L1vVed",
	"XmfHBsX1VneNrKnP81b6V/c2fyjnSxu7t/bIrtute+uYvMGI7q3p7IZaD6jrOnxJmMRiaWP3Vh2F8gQT",
	"CKMRYJlwEEua6gdbv0GZ9mJJU3FwKmpqH8agDwJzqZr3gdf33oEchOFB2k/tW+YLnZU19j6LItwWoDop",
	"3RgSIZX6NJFPLfY6YZj5kiYK6UAVc0A6tKBabUJy8PHgqoMGusJCI7iZTNkCCnkJo0KN65/TF+jqGmYK",
	"zBWoIQ4y4TSNNtnAkbYj9Fu1U5CLPl3DzM3xnzrrc5+ZkACdgNUT6Wn/tpq2gKFLyuTlekT+bS0q15uz",
	"QK6nNKTX974kwGfumpENGL/VzPda9qZyjd87by0p1LU0YjrTNTNCEG2TJcN2RjZMgbpC3TQyJ4CjgIGB",
	"cL0UMx7FnExJCDZnrAVO+QnZdDpYSATSFQmLlkaEHKT0FFYXwAgnofT6IxwKqPgX8/mFDoLq0gB9jnZ7",
	"PYcttnYCZ3UR3T+ECf5kL1gWUytlhTV4VW0kd8oy5LjBwrLaJHP2viNNhcqQBRTp7XIhXEUMoVMcEkvL",
	"zsPTEhDjL8WcTUmglAzn2s9IlBEo7dsVJusIOjaJkb3eq4cnVbFLkapIY5x8c36MlvZcTQQEqZArWl8/",
	"4BYPbFzF1tYwXx/ToGDMaXTImXFnF0VD7exCnRwTDJl5fU+JecHM1v6V1gEGx5T9oa3MMy/DrYt5Aceq",
	"VsNCWPuU67gE37S20An8VFmU4sNZBNlY3XdQjA1cNnDZwGUDlw1cNnD5XeASU1RCp7tCZsGXXgieDweY",
	"NdNlOZIGehvobaC3gd4Gep8S9O719h6UVpfVSw8lfCVCPmMjIF9FsDH8F2Pknk5/QtUY0ClKOMh/Ac3T",
	"MAdqZsrdKb2HZaGzlvqehNJ0AnxGA63xbzCR2fV9m05WDUNlKVAcqhPUQgkN1fnpISIKX8iok85pEaSS",
	"YzvnAqSQJAKWyBNDQD1S9HJF/oTKV7tey4sIJVES6Ua7WEIljHXBXBVC9urzttnFAyzMYhv93uj3H0Jr",
	"KmpVBb/X+4+fQ4pjnZX8fP1ZdqbtCX0OSGRgQPmfmvfKHcrf0K9BodZK5/IvCCY/0kIvfvXfOgI8Yglt",
	"lHajtB9YaT91XfgO5N0UYYylP6mqQn1z9q+uDLWsvmGmZnmJSLQ1E1866bBleFqJamnKtmffXE5PBVDf",
	"7Ejv+Xpn5xShW/UfQucei8+9Pjr3cBCcey33VC3OPO+q0bkWE0TTTXTHXFs591Tj/JxeKOHeKRLz3n1J",
	"V0DEtfner1H+fqf9fjSxOYFZqWW39A119WTv9HrvSJHm3SLNJyBz3GO2KHdzCnPXD+tIshOpZ+mlYEtq",
	"YOjUlGbkviqSay/X5o/hDyc0u9KrGpSg19C5V6TzkN6NTHP3fQ1Ks3fO88ct/SKBVRfbSzf4q980MC+f",
	"6nm9GVP3uwTSn2jIwtlVmMLXOzXWR2N9PLDL+MvPIcXXl1hLd0GDxFz7o/A1Bl89SUv693ZeP6CZFEFA",
	"MFIHHzF7OQdTdLUEhq+0MLhqe03x7u4jYu0Q9HfoICLRjW6Hrz5AgHB2i19X6z4Hk9T8eswdrdKkxj03",
	"P0bTGKXrGaWrLFFzA6AG8TXYn3vGuNTGZM8Zky3TlPshANPDfHHSe5n2yAy/nHFy7lWMQDX4tbb5Ukui",
	"9CW1tk/OLJzXmLKl1ZjUrY00o9yFn8oqlyzFvqlkgFppXsy3vMhZm86PIM8ZfYVNt6Q3dNJmJR6mLYCI",
	"pY9zm7FT2oy7sNra18t5vZPZ4PYVpe9ZMN1e9V73XlkuFWy7deJA1d+Vuo8lVwgcWRWrt84YTCsG2LtU",
	"jbXXWHsPZge4+3vODpALU8X6JuAqG+KxWpJumYw/WaPysVqSNaz9KxmVFvDT1ed+JnBJ5cEEcCgn3+wN",
	"tJCNlWWmP9vDt+oy2pHr1txFayr8mgq/R1rh5w5zU+DX1NY/2bK6VIgX3kRLMcuAm/vzDvfQFsNZc/Ws",
	"QccGHRt0bNCxQcfHjo6LL56th5DFa2fLi82Pct8k/BSvnjUF4vlbGU19eBP+/Vn3fx66PDwv83epDn/o",
	"SLKjsxDtdMTmQpwTnPuGxmdaxl69S5VDtNYqt+6pgNSPNI0LP+ewxsloys4bLGjugt636nyF3lpWc/4U",
	"ddcPqxNPf6n/R5WJ99YoEz8BmRHy+Cqud+srrrPNfBwF169qC67XpfJZ11s7JjSo26Duw3pgj8CzeZbF",
	"1s+wZHmVSbO4YPk5WzTrFRlXUc7WyooQu2LXaV2ta69DMWVpKe5ObSnuwtlXVOJmpbbVMtzVhBWLcL9f",
	"hWzVYd0UbnNe7To1sfn+TUlsg8g/CQcfVVVrLaXPsqj1GdaDLkXsecvr6l/DsPWf+nP97z7UNXVv1VPd",
	"QxOtf+hL02x+q+P2FnX+odBIdPz4gPkd0+UzD9F87s0v5v8KAAD//+vBZk18mwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
