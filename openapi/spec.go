// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///1qD6BQKMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
