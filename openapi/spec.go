// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3xQDw3SogEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
