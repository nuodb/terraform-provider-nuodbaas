/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the DatabaseQuotaSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseQuotaSpec{}

// DatabaseQuotaSpec struct for DatabaseQuotaSpec
type DatabaseQuotaSpec struct {
	// The set of desired hard limits for each named resource.
	Hard *map[string]IntOrString `json:"hard,omitempty"`
	Scope *Scope `json:"scope,omitempty"`
}

// NewDatabaseQuotaSpec instantiates a new DatabaseQuotaSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseQuotaSpec() *DatabaseQuotaSpec {
	this := DatabaseQuotaSpec{}
	return &this
}

// NewDatabaseQuotaSpecWithDefaults instantiates a new DatabaseQuotaSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseQuotaSpecWithDefaults() *DatabaseQuotaSpec {
	this := DatabaseQuotaSpec{}
	return &this
}

// GetHard returns the Hard field value if set, zero value otherwise.
func (o *DatabaseQuotaSpec) GetHard() map[string]IntOrString {
	if o == nil || IsNil(o.Hard) {
		var ret map[string]IntOrString
		return ret
	}
	return *o.Hard
}

// GetHardOk returns a tuple with the Hard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaSpec) GetHardOk() (*map[string]IntOrString, bool) {
	if o == nil || IsNil(o.Hard) {
		return nil, false
	}
	return o.Hard, true
}

// HasHard returns a boolean if a field has been set.
func (o *DatabaseQuotaSpec) HasHard() bool {
	if o != nil && !IsNil(o.Hard) {
		return true
	}

	return false
}

// SetHard gets a reference to the given map[string]IntOrString and assigns it to the Hard field.
func (o *DatabaseQuotaSpec) SetHard(v map[string]IntOrString) {
	o.Hard = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *DatabaseQuotaSpec) GetScope() Scope {
	if o == nil || IsNil(o.Scope) {
		var ret Scope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaSpec) GetScopeOk() (*Scope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *DatabaseQuotaSpec) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given Scope and assigns it to the Scope field.
func (o *DatabaseQuotaSpec) SetScope(v Scope) {
	o.Scope = &v
}

func (o DatabaseQuotaSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseQuotaSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hard) {
		toSerialize["hard"] = o.Hard
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableDatabaseQuotaSpec struct {
	value *DatabaseQuotaSpec
	isSet bool
}

func (v NullableDatabaseQuotaSpec) Get() *DatabaseQuotaSpec {
	return v.value
}

func (v *NullableDatabaseQuotaSpec) Set(val *DatabaseQuotaSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseQuotaSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseQuotaSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseQuotaSpec(val *DatabaseQuotaSpec) *NullableDatabaseQuotaSpec {
	return &NullableDatabaseQuotaSpec{value: val, isSet: true}
}

func (v NullableDatabaseQuotaSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseQuotaSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


