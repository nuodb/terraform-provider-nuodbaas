/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"fmt"
)

// checks if the DbaasUserModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbaasUserModel{}

// DbaasUserModel struct for DbaasUserModel
type DbaasUserModel struct {
	Organization *string `json:"organization,omitempty"`
	Name *string `json:"name,omitempty"`
	// User-defined labels attached to the resource that can be used for filtering
	Labels *map[string]string `json:"labels,omitempty"`
	AccessRule DbaasAccessRuleModel `json:"accessRule"`
	// The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
}

type _DbaasUserModel DbaasUserModel

// NewDbaasUserModel instantiates a new DbaasUserModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbaasUserModel(accessRule DbaasAccessRuleModel) *DbaasUserModel {
	this := DbaasUserModel{}
	this.AccessRule = accessRule
	return &this
}

// NewDbaasUserModelWithDefaults instantiates a new DbaasUserModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbaasUserModelWithDefaults() *DbaasUserModel {
	this := DbaasUserModel{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *DbaasUserModel) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbaasUserModel) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *DbaasUserModel) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *DbaasUserModel) SetOrganization(v string) {
	o.Organization = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbaasUserModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbaasUserModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbaasUserModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbaasUserModel) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DbaasUserModel) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbaasUserModel) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DbaasUserModel) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *DbaasUserModel) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAccessRule returns the AccessRule field value
func (o *DbaasUserModel) GetAccessRule() DbaasAccessRuleModel {
	if o == nil {
		var ret DbaasAccessRuleModel
		return ret
	}

	return o.AccessRule
}

// GetAccessRuleOk returns a tuple with the AccessRule field value
// and a boolean to check if the value has been set.
func (o *DbaasUserModel) GetAccessRuleOk() (*DbaasAccessRuleModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessRule, true
}

// SetAccessRule sets field value
func (o *DbaasUserModel) SetAccessRule(v DbaasAccessRuleModel) {
	o.AccessRule = v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *DbaasUserModel) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbaasUserModel) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *DbaasUserModel) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *DbaasUserModel) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

func (o DbaasUserModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbaasUserModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["accessRule"] = o.AccessRule
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	return toSerialize, nil
}

func (o *DbaasUserModel) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessRule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDbaasUserModel := _DbaasUserModel{}

	err = json.Unmarshal(bytes, &varDbaasUserModel)

	if err != nil {
		return err
	}

	*o = DbaasUserModel(varDbaasUserModel)

	return err
}

type NullableDbaasUserModel struct {
	value *DbaasUserModel
	isSet bool
}

func (v NullableDbaasUserModel) Get() *DbaasUserModel {
	return v.value
}

func (v *NullableDbaasUserModel) Set(val *DbaasUserModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDbaasUserModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDbaasUserModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbaasUserModel(val *DbaasUserModel) *NullableDbaasUserModel {
	return &NullableDbaasUserModel{value: val, isSet: true}
}

func (v NullableDbaasUserModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbaasUserModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


