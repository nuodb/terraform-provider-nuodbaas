/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"time"
)

// checks if the MaintenanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaintenanceModel{}

// MaintenanceModel struct for MaintenanceModel
type MaintenanceModel struct {
	// The time at which the project or database will be disabled
	ExpiresAtTime *time.Time `json:"expiresAtTime,omitempty"`
	// The time until the project or database is disabled, e.g. `1d`
	ExpiresIn *string `json:"expiresIn,omitempty"`
	// Whether the project or database should be shutdown
	IsDisabled *bool `json:"isDisabled,omitempty"`
}

// NewMaintenanceModel instantiates a new MaintenanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaintenanceModel() *MaintenanceModel {
	this := MaintenanceModel{}
	return &this
}

// NewMaintenanceModelWithDefaults instantiates a new MaintenanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaintenanceModelWithDefaults() *MaintenanceModel {
	this := MaintenanceModel{}
	return &this
}

// GetExpiresAtTime returns the ExpiresAtTime field value if set, zero value otherwise.
func (o *MaintenanceModel) GetExpiresAtTime() time.Time {
	if o == nil || IsNil(o.ExpiresAtTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtTime
}

// GetExpiresAtTimeOk returns a tuple with the ExpiresAtTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceModel) GetExpiresAtTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAtTime) {
		return nil, false
	}
	return o.ExpiresAtTime, true
}

// HasExpiresAtTime returns a boolean if a field has been set.
func (o *MaintenanceModel) HasExpiresAtTime() bool {
	if o != nil && !IsNil(o.ExpiresAtTime) {
		return true
	}

	return false
}

// SetExpiresAtTime gets a reference to the given time.Time and assigns it to the ExpiresAtTime field.
func (o *MaintenanceModel) SetExpiresAtTime(v time.Time) {
	o.ExpiresAtTime = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *MaintenanceModel) GetExpiresIn() string {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret string
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceModel) GetExpiresInOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *MaintenanceModel) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given string and assigns it to the ExpiresIn field.
func (o *MaintenanceModel) SetExpiresIn(v string) {
	o.ExpiresIn = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *MaintenanceModel) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceModel) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *MaintenanceModel) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *MaintenanceModel) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

func (o MaintenanceModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaintenanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAtTime) {
		toSerialize["expiresAtTime"] = o.ExpiresAtTime
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expiresIn"] = o.ExpiresIn
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	return toSerialize, nil
}

type NullableMaintenanceModel struct {
	value *MaintenanceModel
	isSet bool
}

func (v NullableMaintenanceModel) Get() *MaintenanceModel {
	return v.value
}

func (v *NullableMaintenanceModel) Set(val *MaintenanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceModel(val *MaintenanceModel) *NullableMaintenanceModel {
	return &NullableMaintenanceModel{value: val, isSet: true}
}

func (v NullableMaintenanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


