/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the DatabaseQuotaStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseQuotaStatus{}

// DatabaseQuotaStatus struct for DatabaseQuotaStatus
type DatabaseQuotaStatus struct {
	// The current observed total usage of the named resources per scoped group.
	Used *map[string]map[string]IntOrString `json:"used,omitempty"`
}

// NewDatabaseQuotaStatus instantiates a new DatabaseQuotaStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseQuotaStatus() *DatabaseQuotaStatus {
	this := DatabaseQuotaStatus{}
	return &this
}

// NewDatabaseQuotaStatusWithDefaults instantiates a new DatabaseQuotaStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseQuotaStatusWithDefaults() *DatabaseQuotaStatus {
	this := DatabaseQuotaStatus{}
	return &this
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *DatabaseQuotaStatus) GetUsed() map[string]map[string]IntOrString {
	if o == nil || IsNil(o.Used) {
		var ret map[string]map[string]IntOrString
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaStatus) GetUsedOk() (*map[string]map[string]IntOrString, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *DatabaseQuotaStatus) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given map[string]map[string]IntOrString and assigns it to the Used field.
func (o *DatabaseQuotaStatus) SetUsed(v map[string]map[string]IntOrString) {
	o.Used = &v
}

func (o DatabaseQuotaStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseQuotaStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

type NullableDatabaseQuotaStatus struct {
	value *DatabaseQuotaStatus
	isSet bool
}

func (v NullableDatabaseQuotaStatus) Get() *DatabaseQuotaStatus {
	return v.value
}

func (v *NullableDatabaseQuotaStatus) Set(val *DatabaseQuotaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseQuotaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseQuotaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseQuotaStatus(val *DatabaseQuotaStatus) *NullableDatabaseQuotaStatus {
	return &NullableDatabaseQuotaStatus{value: val, isSet: true}
}

func (v NullableDatabaseQuotaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseQuotaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


