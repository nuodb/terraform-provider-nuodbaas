/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
)

// checks if the HelmFeatureSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmFeatureSpec{}

// HelmFeatureSpec struct for HelmFeatureSpec
type HelmFeatureSpec struct {
	// The Helm chart version compatibility constraint for the Helm feature.
	ChartCompatibility *string `json:"chartCompatibility,omitempty"`
	// Whether the Helm feature is optional and does not emit an error if the Helm chart or product version is incompatible.
	Optional *bool `json:"optional,omitempty"`
	// The parameter definitions referenced in values. For example, parameter named `foo` is referenced using `<< .meta.params.foo >>` template.
	Parameters *map[string]Parameters `json:"parameters,omitempty"`
	// The NuoDB product version compatibility constraint for the Helm feature.
	ProductCompatibility *string `json:"productCompatibility,omitempty"`
	Values *map[string]AnyTypeValue `json:"values,omitempty"`
}

// NewHelmFeatureSpec instantiates a new HelmFeatureSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmFeatureSpec() *HelmFeatureSpec {
	this := HelmFeatureSpec{}
	return &this
}

// NewHelmFeatureSpecWithDefaults instantiates a new HelmFeatureSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmFeatureSpecWithDefaults() *HelmFeatureSpec {
	this := HelmFeatureSpec{}
	return &this
}

// GetChartCompatibility returns the ChartCompatibility field value if set, zero value otherwise.
func (o *HelmFeatureSpec) GetChartCompatibility() string {
	if o == nil || IsNil(o.ChartCompatibility) {
		var ret string
		return ret
	}
	return *o.ChartCompatibility
}

// GetChartCompatibilityOk returns a tuple with the ChartCompatibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmFeatureSpec) GetChartCompatibilityOk() (*string, bool) {
	if o == nil || IsNil(o.ChartCompatibility) {
		return nil, false
	}
	return o.ChartCompatibility, true
}

// HasChartCompatibility returns a boolean if a field has been set.
func (o *HelmFeatureSpec) HasChartCompatibility() bool {
	if o != nil && !IsNil(o.ChartCompatibility) {
		return true
	}

	return false
}

// SetChartCompatibility gets a reference to the given string and assigns it to the ChartCompatibility field.
func (o *HelmFeatureSpec) SetChartCompatibility(v string) {
	o.ChartCompatibility = &v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *HelmFeatureSpec) GetOptional() bool {
	if o == nil || IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmFeatureSpec) GetOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *HelmFeatureSpec) HasOptional() bool {
	if o != nil && !IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *HelmFeatureSpec) SetOptional(v bool) {
	o.Optional = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *HelmFeatureSpec) GetParameters() map[string]Parameters {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]Parameters
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmFeatureSpec) GetParametersOk() (*map[string]Parameters, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *HelmFeatureSpec) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]Parameters and assigns it to the Parameters field.
func (o *HelmFeatureSpec) SetParameters(v map[string]Parameters) {
	o.Parameters = &v
}

// GetProductCompatibility returns the ProductCompatibility field value if set, zero value otherwise.
func (o *HelmFeatureSpec) GetProductCompatibility() string {
	if o == nil || IsNil(o.ProductCompatibility) {
		var ret string
		return ret
	}
	return *o.ProductCompatibility
}

// GetProductCompatibilityOk returns a tuple with the ProductCompatibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmFeatureSpec) GetProductCompatibilityOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCompatibility) {
		return nil, false
	}
	return o.ProductCompatibility, true
}

// HasProductCompatibility returns a boolean if a field has been set.
func (o *HelmFeatureSpec) HasProductCompatibility() bool {
	if o != nil && !IsNil(o.ProductCompatibility) {
		return true
	}

	return false
}

// SetProductCompatibility gets a reference to the given string and assigns it to the ProductCompatibility field.
func (o *HelmFeatureSpec) SetProductCompatibility(v string) {
	o.ProductCompatibility = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *HelmFeatureSpec) GetValues() map[string]AnyTypeValue {
	if o == nil || IsNil(o.Values) {
		var ret map[string]AnyTypeValue
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmFeatureSpec) GetValuesOk() (*map[string]AnyTypeValue, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *HelmFeatureSpec) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]AnyTypeValue and assigns it to the Values field.
func (o *HelmFeatureSpec) SetValues(v map[string]AnyTypeValue) {
	o.Values = &v
}

func (o HelmFeatureSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmFeatureSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChartCompatibility) {
		toSerialize["chartCompatibility"] = o.ChartCompatibility
	}
	if !IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.ProductCompatibility) {
		toSerialize["productCompatibility"] = o.ProductCompatibility
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableHelmFeatureSpec struct {
	value *HelmFeatureSpec
	isSet bool
}

func (v NullableHelmFeatureSpec) Get() *HelmFeatureSpec {
	return v.value
}

func (v *NullableHelmFeatureSpec) Set(val *HelmFeatureSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmFeatureSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmFeatureSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmFeatureSpec(val *HelmFeatureSpec) *NullableHelmFeatureSpec {
	return &NullableHelmFeatureSpec{value: val, isSet: true}
}

func (v NullableHelmFeatureSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmFeatureSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


