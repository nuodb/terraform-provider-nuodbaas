/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabasequotaspecScopeFieldselectorMatchExpressions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabasequotaspecScopeFieldselectorMatchExpressions{}

// DatabasequotaspecScopeFieldselectorMatchExpressions struct for DatabasequotaspecScopeFieldselectorMatchExpressions
type DatabasequotaspecScopeFieldselectorMatchExpressions struct {
	// The path of the field to apply the selector requirement to.
	Key string `json:"key"`
	// The operator to apply to the field value. One of `=`, `==`, and `!=`.
	Operator string `json:"operator"`
	// The value to compare to.
	Value *string `json:"value,omitempty"`
}

type _DatabasequotaspecScopeFieldselectorMatchExpressions DatabasequotaspecScopeFieldselectorMatchExpressions

// NewDatabasequotaspecScopeFieldselectorMatchExpressions instantiates a new DatabasequotaspecScopeFieldselectorMatchExpressions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabasequotaspecScopeFieldselectorMatchExpressions(key string, operator string) *DatabasequotaspecScopeFieldselectorMatchExpressions {
	this := DatabasequotaspecScopeFieldselectorMatchExpressions{}
	this.Key = key
	this.Operator = operator
	return &this
}

// NewDatabasequotaspecScopeFieldselectorMatchExpressionsWithDefaults instantiates a new DatabasequotaspecScopeFieldselectorMatchExpressions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabasequotaspecScopeFieldselectorMatchExpressionsWithDefaults() *DatabasequotaspecScopeFieldselectorMatchExpressions {
	this := DatabasequotaspecScopeFieldselectorMatchExpressions{}
	return &this
}

// GetKey returns the Key field value
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) SetKey(v string) {
	o.Key = v
}

// GetOperator returns the Operator field value
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) SetValue(v string) {
	o.Value = &v
}

func (o DatabasequotaspecScopeFieldselectorMatchExpressions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabasequotaspecScopeFieldselectorMatchExpressions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["operator"] = o.Operator
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *DatabasequotaspecScopeFieldselectorMatchExpressions) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabasequotaspecScopeFieldselectorMatchExpressions := _DatabasequotaspecScopeFieldselectorMatchExpressions{}

	err = json.Unmarshal(bytes, &varDatabasequotaspecScopeFieldselectorMatchExpressions)

	if err != nil {
		return err
	}

	*o = DatabasequotaspecScopeFieldselectorMatchExpressions(varDatabasequotaspecScopeFieldselectorMatchExpressions)

	return err
}

type NullableDatabasequotaspecScopeFieldselectorMatchExpressions struct {
	value *DatabasequotaspecScopeFieldselectorMatchExpressions
	isSet bool
}

func (v NullableDatabasequotaspecScopeFieldselectorMatchExpressions) Get() *DatabasequotaspecScopeFieldselectorMatchExpressions {
	return v.value
}

func (v *NullableDatabasequotaspecScopeFieldselectorMatchExpressions) Set(val *DatabasequotaspecScopeFieldselectorMatchExpressions) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabasequotaspecScopeFieldselectorMatchExpressions) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabasequotaspecScopeFieldselectorMatchExpressions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabasequotaspecScopeFieldselectorMatchExpressions(val *DatabasequotaspecScopeFieldselectorMatchExpressions) *NullableDatabasequotaspecScopeFieldselectorMatchExpressions {
	return &NullableDatabasequotaspecScopeFieldselectorMatchExpressions{value: val, isSet: true}
}

func (v NullableDatabasequotaspecScopeFieldselectorMatchExpressions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabasequotaspecScopeFieldselectorMatchExpressions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


