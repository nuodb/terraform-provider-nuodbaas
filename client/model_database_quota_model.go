/*
NuoDB Control Plane REST API

NuoDB Control Plane (CP) allows users to create and manage NuoDB databases remotely using a Database as a Service (DBaaS) model.

API version: 2.3.0
Contact: NuoDB.Support@3ds.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nuodbaas

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseQuotaModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseQuotaModel{}

// DatabaseQuotaModel struct for DatabaseQuotaModel
type DatabaseQuotaModel struct {
	// The name of the resource
	Name string `json:"name"`
	// Human-readable description of the resource
	Description *string `json:"description,omitempty"`
	// The version of the resource. When specified in a `PUT` request payload, indicates that the resoure should be updated, and is used by the system to guard against concurrent updates.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	Spec DatabaseQuotaSpec `json:"spec"`
	Status *DatabaseQuotaStatus `json:"status,omitempty"`
}

type _DatabaseQuotaModel DatabaseQuotaModel

// NewDatabaseQuotaModel instantiates a new DatabaseQuotaModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseQuotaModel(name string, spec DatabaseQuotaSpec) *DatabaseQuotaModel {
	this := DatabaseQuotaModel{}
	this.Name = name
	this.Spec = spec
	return &this
}

// NewDatabaseQuotaModelWithDefaults instantiates a new DatabaseQuotaModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseQuotaModelWithDefaults() *DatabaseQuotaModel {
	this := DatabaseQuotaModel{}
	return &this
}

// GetName returns the Name field value
func (o *DatabaseQuotaModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseQuotaModel) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatabaseQuotaModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatabaseQuotaModel) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatabaseQuotaModel) SetDescription(v string) {
	o.Description = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *DatabaseQuotaModel) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaModel) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *DatabaseQuotaModel) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *DatabaseQuotaModel) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetSpec returns the Spec field value
func (o *DatabaseQuotaModel) GetSpec() DatabaseQuotaSpec {
	if o == nil {
		var ret DatabaseQuotaSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaModel) GetSpecOk() (*DatabaseQuotaSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *DatabaseQuotaModel) SetSpec(v DatabaseQuotaSpec) {
	o.Spec = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DatabaseQuotaModel) GetStatus() DatabaseQuotaStatus {
	if o == nil || IsNil(o.Status) {
		var ret DatabaseQuotaStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseQuotaModel) GetStatusOk() (*DatabaseQuotaStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DatabaseQuotaModel) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DatabaseQuotaStatus and assigns it to the Status field.
func (o *DatabaseQuotaModel) SetStatus(v DatabaseQuotaStatus) {
	o.Status = &v
}

func (o DatabaseQuotaModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseQuotaModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	toSerialize["spec"] = o.Spec
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *DatabaseQuotaModel) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseQuotaModel := _DatabaseQuotaModel{}

	err = json.Unmarshal(bytes, &varDatabaseQuotaModel)

	if err != nil {
		return err
	}

	*o = DatabaseQuotaModel(varDatabaseQuotaModel)

	return err
}

type NullableDatabaseQuotaModel struct {
	value *DatabaseQuotaModel
	isSet bool
}

func (v NullableDatabaseQuotaModel) Get() *DatabaseQuotaModel {
	return v.value
}

func (v *NullableDatabaseQuotaModel) Set(val *DatabaseQuotaModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseQuotaModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseQuotaModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseQuotaModel(val *DatabaseQuotaModel) *NullableDatabaseQuotaModel {
	return &NullableDatabaseQuotaModel{value: val, isSet: true}
}

func (v NullableDatabaseQuotaModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseQuotaModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


