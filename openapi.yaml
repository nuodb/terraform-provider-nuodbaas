openapi: 3.0.1
info:
  title: NuoDB Control Plane REST API
  description: NuoDB Control Plane (CP) allows users to create and manage NuoDB databases
    remotely using a Database as a Service (DBaaS) model.
  termsOfService: https://doc.nuodb.com/nuodb/latest/release-notes/nuodb-license-terms/
  contact:
    url: https://nuodb.com
    email: NuoDB.Support@3ds.com
  version: 2.8.0
servers:
- url: https://example.nuodb.com
paths:
  /backuppolicies:
    get:
      tags:
      - backuppolicies
      summary: List the backup policies in the cluster
      operationId: getAllBackupPolicies
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backup policies was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backuppolicies/{organization}:
    get:
      tags:
      - backuppolicies
      summary: List the backup policies in an organization
      operationId: getBackupPolicies
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backup policies was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backuppolicies/{organization}/{policy}:
    get:
      tags:
      - backuppolicies
      summary: Get an existing backup policy
      operationId: getBackupPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The backup policy was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupPolicyModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    put:
      tags:
      - backuppolicies
      summary: Create or update a backup policy
      operationId: createBackupPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupPolicyModel"
            examples:
              "0":
                summary: Create backup policy for databases within an organization
                value: |-
                  {
                    "frequency": "@weekly",
                    "selector": {
                      "scope": "acme"
                    }
                  }
              "1":
                summary: Create backup policy for databases within a project
                value: |-
                  {
                    "frequency": "@weekly",
                    "selector": {
                      "scope": "acme/messaging"
                    }
                  }
              "2":
                summary: Create backup policy for databases with an SLA
                value: |-
                  {
                    "frequency": "@daily",
                    "selector": {
                      "slas": ["prod"]
                    }
                  }
              "3":
                summary: Update labels for a backup policy
                value: |-
                  {
                    "organization": "acme",
                    "name": "default",
                    "labels": {
                      "rpo": "1d"
                    },
                    "frequency": "@daily",
                    "selector": {
                      "scope": "acme"
                    },
                    "resourceVersion": "12321"
                  }
        required: true
      responses:
        "200":
          description: The backup policy was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupPolicyModel"
        "201":
          description: The backup policy was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupPolicyModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy could not be updated because it does not
            exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The backup policy not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    delete:
      tags:
      - backuppolicies
      summary: Delete an existing backup policy
      operationId: deleteBackupPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The backup policy was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The backup policy was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    patch:
      tags:
      - backuppolicies
      summary: Update an existing backup policy
      operationId: patchBackupPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
            examples:
              "0":
                summary: Change backup frequency
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/frequency",
                      "value": "@daily"
                    }
                  ]
              "1":
                summary: Set number of weekly backups retained
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/retention/weekly",
                      "value": 4
                    }
                  ]
              "2":
                summary: Suspend backups
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/suspended",
                      "value": true
                    }
                  ]
              "3":
                summary: Resume backups
                value: |-
                  [
                    {
                      "op": "remove",
                      "path": "/suspended"
                    }
                  ]
        required: true
      responses:
        "200":
          description: The patch was applied to the backup policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupPolicyModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The backup policy could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backuppolicies/{organization}/{policy}/backups:
    get:
      tags:
      - backuppolicies
      summary: List the backups taken by the backup policy
      operationId: getBackupsFromPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backups was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backuppolicies/{organization}/{policy}/databases:
    get:
      tags:
      - backuppolicies
      summary: List the databases that the backup policy applies to
      operationId: getMatchingDatabases
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of databases was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup policy does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backups:
    get:
      tags:
      - backups
      summary: List the database backups for the cluster
      operationId: getAllBackups
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backups was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backups/{organization}:
    get:
      tags:
      - backups
      summary: List the database backups for an organization
      operationId: getOrganizationBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backups was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backups/{organization}/{project}:
    get:
      tags:
      - backups
      summary: List the database backups for a project
      operationId: getProjectBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backups was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backups/{organization}/{project}/{database}:
    get:
      tags:
      - backups
      summary: List the backups for a database
      operationId: getBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of backups was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    post:
      tags:
      - backups
      summary: Create an on-demand backup
      operationId: createBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupCreateModel"
            examples:
              "0":
                summary: Create backup with labels
                value: |-
                  {
                    "labels": {
                      "validated": "true"
                    }
                  }
        required: true
      responses:
        "201":
          description: The backup was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup could not be created because the database does not
            exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The backup could not be created due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /backups/{organization}/{project}/{database}/{backup}:
    get:
      tags:
      - backups
      summary: Get an existing backup
      operationId: getBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: backup
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The backup was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    put:
      tags:
      - backups
      summary: Create or update a backup
      operationId: createOrUpdateBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: backup
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupModel"
            examples:
              "0":
                summary: Update labels for backup
                value: |-
                  {
                    "organization": "acme",
                    "project": "messaging",
                    "database": "demo",
                    "name": "20240101000000",
                    "labels": {
                      "validated": "true"
                    },
                    "resourceVersion": "12321"
                  }
              "1":
                summary: Import an existing backup handle
                value: |-
                  {
                    "importSource": {
                      "backupHandle": "acme-messaging-demo-20240101000000",
                      "backupPlugin": "embedded.cp.nuodb.com"
                    }
                  }
        required: true
      responses:
        "200":
          description: The backup was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupModel"
        "201":
          description: The backup was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: "The backup could not be created because the database does\
            \ not exist, or could not be updated because it does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The backup could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    delete:
      tags:
      - backups
      summary: Delete an existing backup
      operationId: deleteBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: backup
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The backup was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The backup was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    patch:
      tags:
      - backups
      summary: Update an existing backup
      operationId: patchBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: backup
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
            examples:
              "0":
                summary: Add label to backup
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/labels/validated",
                      "value": "true"
                    }
                  ]
              "1":
                summary: Remove label from backup
                value: |-
                  [
                    {
                      "op": "remove",
                      "path": "/labels/validated"
                    }
                  ]
        required: true
      responses:
        "200":
          description: The patch was applied to the backup
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The backup does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The backup could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /databases:
    get:
      tags:
      - databases
      summary: List the databases in the cluster
      operationId: getAllDatabases
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of databases was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /databases/{organization}:
    get:
      tags:
      - databases
      summary: List the databases in an organization
      operationId: getOrganizationDatabases
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of databases was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /databases/{organization}/{project}:
    get:
      tags:
      - databases
      summary: List the databases in a project
      operationId: getDatabases
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of databases was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /databases/{organization}/{project}/{database}:
    get:
      tags:
      - databases
      summary: Get an existing database
      operationId: getDatabase
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The database was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    put:
      tags:
      - databases
      summary: Create or update a database
      operationId: createDatabase
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseCreateUpdateModel"
            examples:
              "0":
                summary: Create database
                value: |-
                  {
                    "tier": "n0.small",
                    "dbaPassword": "changeIt",
                    "properties": {
                      "archiveDiskSize": "50Gi",
                      "journalDiskSize": "5Gi"
                    }
                  }
              "1":
                summary: Create database with default properties
                value: |-
                  {
                    "dbaPassword": "changeIt"
                  }
              "2":
                summary: Update database
                value: |-
                  {
                    "organization": "acme",
                    "project": "messaging",
                    "name": "demo",
                    "tier": "n1.small",
                    "properties": {
                      "archiveDiskSize": "100Gi",
                      "journalDiskSize": "10Gi"
                    },
                    "resourceVersion": "30503"
                  }
        required: true
      responses:
        "200":
          description: The database was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseModel"
        "201":
          description: The database was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: "The database could not be created because the project does\
            \ not exist, or could not be updated because it does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The database could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "422":
          description: The database could not be created or updated because it would
            exceed a resource quota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    delete:
      tags:
      - databases
      summary: Delete an existing database
      operationId: deleteDatabase
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The database was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The database was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    patch:
      tags:
      - databases
      summary: Update an existing database
      operationId: patchDatabase
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
            examples:
              "0":
                summary: Change database tier
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/tier",
                      "value": "n1.small"
                    }
                  ]
              "1":
                summary: Increase disk size for database archives
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/properties/archiveDiskSize",
                      "value": "100Gi"
                    }
                  ]
              "2":
                summary: Set database to expire
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/maintenance",
                      "value": {
                        "expiresIn": "1d"
                      }
                    }
                  ]
              "3":
                summary: Disable database
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/maintenance",
                      "value": {
                        "isDisabled": true
                      }
                    }
                  ]
              "4":
                summary: Enable database
                value: |-
                  [
                    {
                      "op": "remove",
                      "path": "/maintenance"
                    }
                  ]
        required: true
      responses:
        "200":
          description: The patch was applied to the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The database could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "422":
          description: The database could not be updated because it would exceed a
            resource quota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /databases/{organization}/{project}/{database}/dbaPassword:
    post:
      tags:
      - databases
      summary: Update the DBA password for a database
      operationId: updateDbaPassword
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDbaPasswordModel"
            examples:
              "0":
                summary: Initiate DBA password update
                value: |-
                  {
                    "current": "currentDbaPassword",
                    "target": "targetDbaPassword"
                  }
              "1":
                summary: Resync configured DBA password
                value: |-
                  {
                    "current": "actualDbaPassword",
                    "resync": true
                  }
              "2":
                summary: Verify current DBA password
                value: |-
                  {
                    "current": "currentDbaPassword"
                  }
        required: true
      responses:
        "200":
          description: The DBA password was updated successfully
        "202":
          description: The DBA password is in the process of being updated
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The DBA password was not updated within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: An unexpected state was encountered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /events/backuppolicies:
    get:
      tags:
      - events/backuppolicies
      summary: List the backup policies in the cluster and stream events on them
      operationId: streamAllBackupPolicies
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupPolicyEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backuppolicies/{organization}:
    get:
      tags:
      - events/backuppolicies
      summary: List the backup policies in an organization and stream events on them
      operationId: streamBackupPolicies
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupPolicyEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backuppolicies/{organization}/{policy}:
    get:
      tags:
      - events/backuppolicies
      summary: Get a backup policy and stream events on it
      operationId: streamBackupPolicy
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: policy
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupPolicyEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backups:
    get:
      tags:
      - events/backups
      summary: List the backups in the cluster and stream events on them
      operationId: streamAllBackups
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backups/{organization}:
    get:
      tags:
      - events/backups
      summary: List the backups in an organization and stream events on them
      operationId: streamOrganizationBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backups/{organization}/{project}:
    get:
      tags:
      - events/backups
      summary: List the backups in a project and stream events on them
      operationId: streamProjectBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backups/{organization}/{project}/{database}:
    get:
      tags:
      - events/backups
      summary: List the backups in a database and stream events on them
      operationId: streamBackups
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/backups/{organization}/{project}/{database}/{backup}:
    get:
      tags:
      - events/backups
      summary: Get a backup and stream events on it
      operationId: streamBackup
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      - name: backup
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/BackupEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/databases:
    get:
      tags:
      - events/databases
      summary: List the databases in the cluster and stream events on them
      operationId: streamAllDatabases
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/DatabaseEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/databases/{organization}:
    get:
      tags:
      - events/databases
      summary: List the databases in an organization and stream events on them
      operationId: streamOrganizationDatabases
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/DatabaseEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/databases/{organization}/{project}:
    get:
      tags:
      - events/databases
      summary: List the databases in a project and stream events on them
      operationId: streamDatabases
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/DatabaseEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/databases/{organization}/{project}/{database}:
    get:
      tags:
      - events/databases
      summary: Get a database and stream events on it
      operationId: streamDatabase
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: database
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/DatabaseEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/projects:
    get:
      tags:
      - events/projects
      summary: List the projects in the cluster and stream events on them
      operationId: streamAllProjects
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ProjectEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/projects/{organization}:
    get:
      tags:
      - events/projects
      summary: List the projects in an organization and stream events on them
      operationId: streamProjects
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ProjectEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/projects/{organization}/{project}:
    get:
      tags:
      - events/projects
      summary: Get a project and stream events on it
      operationId: streamProject
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ProjectEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/users:
    get:
      tags:
      - events/users
      summary: List the users in the cluster and stream events on them
      operationId: streamAllUsers
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/UserEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/users/{organization}:
    get:
      tags:
      - events/users
      summary: List the users in an organization and stream events on them
      operationId: streamUsers
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If omitted or `expand=true`,\
          \ then all payload fields are expanded. If `expand=<field>,...` is supplied,\
          \ then the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field. If\
          \ `expand=false`, then expansion is disabled and only the resource names\
          \ relative to the request path are returned."
        schema:
          type: string
          default: "true"
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      - name: watchAll
        in: query
        description: "Whether to watch for events on all resources in a scope, including\
          \ ones not present in `RESYNC` message"
        schema:
          type: boolean
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/UserEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /events/users/{organization}/{user}:
    get:
      tags:
      - events/users
      summary: Get a user and stream events on it
      operationId: streamUser
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The event stream was successfully created
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/UserEventModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /healthz:
    get:
      tags:
      - healthz
      summary: Get health of service
      operationId: getHealth
      responses:
        "204":
          description: The server is healthy
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "503":
          description: The server is unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /login:
    post:
      tags:
      - login
      summary: Login a user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestModel"
      responses:
        "200":
          description: The login was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: Token authentication is not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: An unexpected state was encountered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /openapi:
    get:
      tags:
      - openapi
      summary: Get the OpenAPI specification for the server
      externalDocs:
        description: Description of the OpenAPI document
        url: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.1.md
      operationId: getSpec
      responses:
        "200":
          description: The OpenAPI specification was returned successfully
          content:
            application/json:
              example:
                openapi: 3.0.1
                info:
                  version: 2.5.0
                paths:
                  /databases:
                    get:
                      parameters: []
                      responses:
                        "200":
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/ItemList"
                      security:
                      - bearerAuth: []
                components:
                  schemas:
                    ItemList:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            type: object
                  securitySchemes:
                    bearerAuth:
                      type: http
                      scheme: BEARER
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /projects:
    get:
      tags:
      - projects
      summary: List the projects in the cluster
      operationId: getAllProjects
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of projects was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /projects/{organization}:
    get:
      tags:
      - projects
      summary: List the projects in an organization
      operationId: getProjects
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of projects was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /projects/{organization}/{project}:
    get:
      tags:
      - projects
      summary: Get an existing project
      operationId: getProject
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The project was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    put:
      tags:
      - projects
      summary: Create or update a project
      operationId: createProject
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectModel"
            examples:
              "0":
                summary: Create project
                value: |-
                  {
                    "sla": "dev",
                    "tier": "n0.nano"
                  }
              "1":
                summary: Update project
                value: |-
                  {
                    "organization": "acme",
                    "name": "messaging",
                    "sla": "dev",
                    "tier": "n0.small",
                    "resourceVersion": "30503"
                  }
        required: true
      responses:
        "200":
          description: The project was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectModel"
        "201":
          description: The project was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project could not be updated because it does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The project could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    delete:
      tags:
      - projects
      summary: Delete an existing project
      operationId: deleteProject
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The project was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The project was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The project could not be deleted because it has databases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    patch:
      tags:
      - projects
      summary: Update an existing project
      operationId: patchProject
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: project
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
            examples:
              "0":
                summary: Change project tier
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/tier",
                      "value": "n0.small"
                    }
                  ]
              "1":
                summary: Set project to expire
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/maintenance",
                      "value": {
                        "expiresIn": "1d"
                      }
                    }
                  ]
              "2":
                summary: Disable project
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/maintenance",
                      "value": {
                        "isDisabled": true
                      }
                    }
                  ]
              "3":
                summary: Enable project
                value: |-
                  [
                    {
                      "op": "remove",
                      "path": "/maintenance"
                    }
                  ]
        required: true
      responses:
        "200":
          description: The patch was applied to the project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The project does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The project could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /users:
    get:
      tags:
      - users
      summary: List the users in the cluster
      operationId: getAllUsers
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of users was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /users/{organization}:
    get:
      tags:
      - users
      summary: List the users in an organization
      operationId: getUsers
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      - name: labelFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on labels, which are composed using `AND`. Acceptable filter expressions are:
          * `key` - Only return resources that have label with specified key
          * `key=value` - Only return resources that have label with specified key set to value
          * `!key` - Only return resources that do _not_ have label with specified key
          * `key!=value` - Only return resources that do _not_ have label with specified key set to value
        schema:
          type: string
      - name: fieldFilter
        in: query
        description: |-
          Comma-separated list of filters to apply based on fields, which are composed using `AND`. Acceptable filter expressions are:
          * `fieldPath` - Only return resources that have a non-`null` value at the specified field path
          * `fieldPath=value` - Only return resources that have a matching value at the specified field path
          * `!fieldPath` - Only return resources that do have a `null` value at the specified field path
          * `fieldPath!=value` - Only return resources that do _not_ have a matching value at the specified field path
        schema:
          type: string
      - name: listAccessible
        in: query
        description: Whether to return any accessible sub-resources even if the current
          user does not have access privileges to list all resources at this level
        schema:
          type: boolean
      responses:
        "200":
          description: The list of users was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /users/{organization}/{user}:
    get:
      tags:
      - users
      summary: Get an existing user
      operationId: getUser
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The user was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbaasUserModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    put:
      tags:
      - users
      summary: Create or update a user
      operationId: createUser
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      - name: allowCrossOrganizationAccess
        in: query
        description: Whether to allow the user to have access outside of its organization
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DbaasUserCreateUpdateModel"
            examples:
              "0":
                summary: Create user
                value: |-
                  {
                    "password": "changeIt",
                    "accessRule": {
                      "allow": [
                        "all:acme"
                      ]
                    }
                  }
              "1":
                summary: Update user
                value: |-
                  {
                    "organization": "acme",
                    "name": "admin",
                    "password": "newPassword",
                    "accessRule": {
                      "allow": [
                        "all:acme"
                      ]
                    },
                    "resourceVersion": "30503"
                  }
        required: true
      responses:
        "200":
          description: The user was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbaasUserModel"
        "201":
          description: The user was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbaasUserModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The user could not be updated because it does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The user could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    delete:
      tags:
      - users
      summary: Delete an existing user
      operationId: deleteUser
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The user was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The user was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
    patch:
      tags:
      - users
      summary: Update an existing user
      operationId: patchUser
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      - name: allowCrossOrganizationAccess
        in: query
        description: Whether to allow the user to have access outside of its organization
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
            examples:
              "0":
                summary: Change user password
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/password",
                      "value": "newPassword"
                    }
                  ]
              "1":
                summary: Change user access
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/accessRule",
                      "value": {
                        "allow": [
                          "read:acme",
                          "all:acme/messaging"
                        ]
                      }
                    }
                  ]
              "2":
                summary: Grant read access for organization
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/accessRule/allow/-",
                      "value": "read:acme"
                    }
                  ]
              "3":
                summary: Grant full access for project
                value: |-
                  [
                    {
                      "op": "add",
                      "path": "/accessRule/allow/-",
                      "value": "all:acme/messaging"
                    }
                  ]
        required: true
      responses:
        "200":
          description: The patch was applied to the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbaasUserModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The user does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The user could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
      x-ui:
        enabled: true
  /cluster/canaryrollouts:
    get:
      tags:
      - cluster/canaryrollouts
      summary: List the canary rollouts
      operationId: getCanaryRollouts
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of canary rollouts was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/canaryrollouts/{name}:
    get:
      tags:
      - cluster/canaryrollouts
      summary: Get an existing canary rollout
      operationId: getCanaryRollout
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The canary rollout was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/canaryrollouts
      summary: Create or update a canary rollout
      operationId: createCanaryRollout
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CanaryRolloutModel"
        required: true
      responses:
        "200":
          description: The canary rollout was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutModel"
        "201":
          description: The canary rollout was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout could not be updated because it does not
            exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The canary rollout could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/canaryrollouts
      summary: Delete an existing canary rollout
      operationId: deleteCanaryRollout
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The canary rollout was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The canary rollout was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/canaryrollouts
      summary: Update an existing canary rollout
      operationId: patchCanaryRollout
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the canary rollout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The canary rollout could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/canaryrollouttemplates:
    get:
      tags:
      - cluster/canaryrollouttemplates
      summary: List the canary rollout templates
      operationId: getCanaryRolloutTemplates
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of canary rollout templates was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/canaryrollouttemplates/{name}:
    get:
      tags:
      - cluster/canaryrollouttemplates
      summary: Get an existing canary rollout template
      operationId: getCanaryRolloutTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The canary rollout template was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/canaryrollouttemplates
      summary: Create or update a canary rollout template
      operationId: createCanaryRolloutTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CanaryRolloutTemplateModel"
        required: true
      responses:
        "200":
          description: The canary rollout template was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutTemplateModel"
        "201":
          description: The canary rollout template was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout template could not be updated because it
            does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The canary rollout template could not be created or updated
            due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/canaryrollouttemplates
      summary: Delete an existing canary rollout template
      operationId: deleteCanaryRolloutTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The canary rollout template was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The canary rollout template was not deleted within the specified
            timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/canaryrollouttemplates
      summary: Update an existing canary rollout template
      operationId: patchCanaryRolloutTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the canary rollout template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanaryRolloutTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The canary rollout template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The canary rollout template could not be updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/databasequotas:
    get:
      tags:
      - cluster/databasequotas
      summary: List the database quotas
      operationId: getDatabaseQuotas
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of database quotas was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/databasequotas/{name}:
    get:
      tags:
      - cluster/databasequotas
      summary: Get an existing database quota
      operationId: getDatabaseQuota
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The database quota was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseQuotaModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database quota does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/databasequotas
      summary: Create or update a database quota
      operationId: createDatabaseQuota
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseQuotaModel"
        required: true
      responses:
        "200":
          description: The database quota was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseQuotaModel"
        "201":
          description: The database quota was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseQuotaModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database quota could not be updated because it does not
            exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The database quota could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/databasequotas
      summary: Delete an existing database quota
      operationId: deleteDatabaseQuota
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The database quota was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database quota does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The database quota was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/databasequotas
      summary: Update an existing database quota
      operationId: patchDatabaseQuota
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the database quota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseQuotaModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The database quota does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The database quota could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/helmfeatures:
    get:
      tags:
      - cluster/helmfeatures
      summary: List the Helm features
      operationId: getHelmFeatures
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of Helm features was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/helmfeatures/{name}:
    get:
      tags:
      - cluster/helmfeatures
      summary: Get an existing Helm feature
      operationId: getHelmFeature
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The Helm feature was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelmFeatureModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The Helm feature does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/helmfeatures
      summary: Create or update a Helm feature
      operationId: createHelmFeature
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HelmFeatureModel"
        required: true
      responses:
        "200":
          description: The Helm feature was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelmFeatureModel"
        "201":
          description: The Helm feature was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelmFeatureModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The Helm feature could not be updated because it does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The Helm feature could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/helmfeatures
      summary: Delete an existing Helm feature
      operationId: deleteHelmFeature
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The Helm feature was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The Helm feature does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The Helm feature was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/helmfeatures
      summary: Update an existing Helm feature
      operationId: patchHelmFeature
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the Helm feature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelmFeatureModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The Helm feature does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The Helm feature could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/roletemplates:
    get:
      tags:
      - cluster/roletemplates
      summary: List the role templates
      operationId: getRoleTemplates
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of role templates was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/roletemplates/{name}:
    get:
      tags:
      - cluster/roletemplates
      summary: Get an existing role template
      operationId: getRoleTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The role template was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The role template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/roletemplates
      summary: Create or update a role template
      operationId: createRoleTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleTemplateModel"
        required: true
      responses:
        "200":
          description: The role template was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleTemplateModel"
        "201":
          description: The role template was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The role template could not be updated because it does not
            exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The role template could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/roletemplates
      summary: Delete an existing role template
      operationId: deleteRoleTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The role template was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The role template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The role template was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/roletemplates
      summary: Update an existing role template
      operationId: patchRoleTemplate
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the role template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleTemplateModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The role template does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The role template could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/servicetiers:
    get:
      tags:
      - cluster/servicetiers
      summary: List the service tiers
      operationId: getServiceTiers
      parameters:
      - name: offset
        in: query
        description: The offset at which to list items
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        description: "The cursor at which to list items, which represents the last\
          \ item returned. If specified, all items returned must be lexicographically\
          \ greater than the supplied value. For expanded payloads, the `$ref` value\
          \ is compared to the cursor."
        schema:
          type: string
      - name: limit
        in: query
        description: "The number of items to return. If payload expansion was enabled\
          \ and `limit` was not specified, the default of 20 is used. Otherwise, the\
          \ default is 0 to indicate that all items should be returned."
        schema:
          type: integer
          format: int32
      - name: expand
        in: query
        description: "Whether to expand payload fields. If `expand=true`, then all\
          \ payload fields are expanded. If `expand=<field>,...` is supplied, then\
          \ the value is interpreted as a comma-separated list of top-level fields\
          \ to expand. If `expand.<field>=<JSONPath expression>` is supplied, then\
          \ the JSONPath expression is used to resolve the user-supplied field."
        schema:
          type: string
      responses:
        "200":
          description: The list of service tiers was returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
  /cluster/servicetiers/{name}:
    get:
      tags:
      - cluster/servicetiers
      summary: Get an existing service tier
      operationId: getServiceTier
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The service tier was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTierModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The service tier does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    put:
      tags:
      - cluster/servicetiers
      summary: Create or update a service tier
      operationId: createServiceTier
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceTierModel"
        required: true
      responses:
        "200":
          description: The service tier was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTierModel"
        "201":
          description: The service tier was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTierModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The service tier could not be updated because it does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The service tier could not be created or updated due to unexpected
            state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    delete:
      tags:
      - cluster/servicetiers
      summary: Delete an existing service tier
      operationId: deleteServiceTier
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "The number of seconds to wait for the operation to be finalized,\
          \ unless 0 is specified which indicates not to wait"
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      responses:
        "204":
          description: The service tier was deleted
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The service tier does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "408":
          description: The service tier was not deleted within the specified timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
    patch:
      tags:
      - cluster/servicetiers
      summary: Update an existing service tier
      operationId: patchServiceTier
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: updateStatus
        in: query
        description: Whether to update the status of the resource
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchOperation"
        required: true
      responses:
        "200":
          description: The patch was applied to the service tier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTierModel"
        "400":
          description: The user request was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "401":
          description: The user did not provide correct authentication credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "403":
          description: The user was not authorized to access the requested resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "404":
          description: The service tier does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "409":
          description: The service tier could not be updated due to unexpected state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "415":
          description: A media type other than `application/json-patch+json` was supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorContent"
      security:
      - basicAuth: []
        bearerAuth: []
components:
  schemas:
    BackupPolicyMissedBackup:
      type: object
      properties:
        missedTime:
          type: string
          description: The time that a backup was missed by this policy
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-tf-name: missed_time
          x-oapi-codegen-extra-tags:
            cty: missed_time
            hcl: missed_time
            tfsdk: missed_time
          x-go-type: string
          x-order: 0
        database:
          type: string
          description: The fully-qualified database name for which a backup was missed
            by this policy
          x-tf-name: database
          x-oapi-codegen-extra-tags:
            cty: database
            hcl: database
            tfsdk: database
          x-order: 1
        reason:
          type: string
          description: A programmatic identifier indicating the reason for missing
            a backup by this policy
          x-tf-name: reason
          x-oapi-codegen-extra-tags:
            cty: reason
            hcl: reason
            tfsdk: reason
          x-order: 2
        message:
          type: string
          description: A human readable message indicating details about the missed
            backup by this policy
          x-tf-name: message
          x-oapi-codegen-extra-tags:
            cty: message
            hcl: message
            tfsdk: message
          x-order: 3
    BackupPolicyModel:
      required:
      - frequency
      - name
      - organization
      - selector
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the backup policy belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-order: 0
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the backup policy
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-order: 1
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 2
        frequency:
          type: string
          description: "The frequency to schedule backups at, in cron format"
          x-tf-name: frequency
          x-oapi-codegen-extra-tags:
            cty: frequency
            hcl: frequency
            tfsdk: frequency
          x-order: 3
        selector:
          $ref: "#/components/schemas/SelectorModel"
        retention:
          $ref: "#/components/schemas/RetentionModel"
        suspended:
          type: boolean
          description: Whether backups from the policy are suspended
          x-tf-name: suspended
          x-oapi-codegen-extra-tags:
            cty: suspended
            hcl: suspended
            tfsdk: suspended
          x-order: 6
        properties:
          $ref: "#/components/schemas/BackupPolicyPropertiesModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 8
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        status:
          $ref: "#/components/schemas/BackupPolicyStatusModel"
    BackupPolicyPropertiesModel:
      type: object
      properties:
        propagatePolicyLabels:
          type: boolean
          description: Whether to propagate the user-defined labels from the backup
            policy to backup resources created by this policy
          default: true
          x-tf-name: propagate_policy_labels
          x-oapi-codegen-extra-tags:
            cty: propagate_policy_labels
            hcl: propagate_policy_labels
            tfsdk: propagate_policy_labels
          x-order: 0
        propagateDatabaseLabels:
          type: boolean
          description: Whether to propagate the user-defined labels from the matching
            database to backup resources created by this policy
          default: true
          x-tf-name: propagate_database_labels
          x-oapi-codegen-extra-tags:
            cty: propagate_database_labels
            hcl: propagate_database_labels
            tfsdk: propagate_database_labels
          x-order: 1
      x-tf-name: properties
      x-oapi-codegen-extra-tags:
        cty: properties
        hcl: properties
        tfsdk: properties
    BackupPolicyStatusModel:
      type: object
      properties:
        lastScheduleTime:
          type: string
          description: The time that backups were last taken by this policy
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-tf-name: last_schedule_time
          x-oapi-codegen-extra-tags:
            cty: last_schedule_time
            hcl: last_schedule_time
            tfsdk: last_schedule_time
          x-go-type: string
          x-order: 0
        lastMissedScheduleTime:
          type: string
          description: The time that backups were last missed by this policy
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-tf-name: last_missed_schedule_time
          x-oapi-codegen-extra-tags:
            cty: last_missed_schedule_time
            hcl: last_missed_schedule_time
            tfsdk: last_missed_schedule_time
          x-go-type: string
          x-order: 1
        nextScheduleTime:
          type: string
          description: The time that backups are next scheduled by this policy
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-tf-name: next_schedule_time
          x-oapi-codegen-extra-tags:
            cty: next_schedule_time
            hcl: next_schedule_time
            tfsdk: next_schedule_time
          x-go-type: string
          x-order: 2
        lastMissedBackups:
          type: array
          description: The last database backups that were not scheduled by this policy
          items:
            $ref: "#/components/schemas/BackupPolicyMissedBackup"
          x-tf-name: last_missed_backups
          x-oapi-codegen-extra-tags:
            cty: last_missed_backups
            hcl: last_missed_backups
            tfsdk: last_missed_backups
          x-order: 3
      readOnly: true
      x-tf-name: status
      x-oapi-codegen-extra-tags:
        cty: status
        hcl: status
        tfsdk: status
    RetentionModel:
      type: object
      properties:
        hourly:
          type: integer
          description: The number of hourly backups to retain
          format: int32
          x-tf-name: hourly
          x-oapi-codegen-extra-tags:
            cty: hourly
            hcl: hourly
            tfsdk: hourly
          x-order: 0
        daily:
          type: integer
          description: The number of daily backups to retain
          format: int32
          x-tf-name: daily
          x-oapi-codegen-extra-tags:
            cty: daily
            hcl: daily
            tfsdk: daily
          x-order: 1
        weekly:
          type: integer
          description: The number of weekly backups to retain
          format: int32
          x-tf-name: weekly
          x-oapi-codegen-extra-tags:
            cty: weekly
            hcl: weekly
            tfsdk: weekly
          x-order: 2
        monthly:
          type: integer
          description: The number of monthly backups to retain
          format: int32
          x-tf-name: monthly
          x-oapi-codegen-extra-tags:
            cty: monthly
            hcl: monthly
            tfsdk: monthly
          x-order: 3
        yearly:
          type: integer
          description: The number of yearly backups to retain
          format: int32
          x-tf-name: yearly
          x-oapi-codegen-extra-tags:
            cty: yearly
            hcl: yearly
            tfsdk: yearly
          x-order: 4
        settings:
          $ref: "#/components/schemas/RotationSettingsModel"
      x-tf-name: retention
      x-oapi-codegen-extra-tags:
        cty: retention
        hcl: retention
        tfsdk: retention
    RotationSettingsModel:
      type: object
      properties:
        dayOfWeek:
          type: string
          description: The day of the week used to promote backup to weekly
          default: Sunday
          enum:
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
          - Sunday
          x-tf-name: day_of_week
          x-oapi-codegen-extra-tags:
            cty: day_of_week
            hcl: day_of_week
            tfsdk: day_of_week
          x-order: 0
        month:
          type: string
          description: The month of the year used to promote backup to yearly
          default: January
          enum:
          - January
          - February
          - March
          - April
          - May
          - June
          - July
          - August
          - September
          - October
          - November
          - December
          x-tf-name: month
          x-oapi-codegen-extra-tags:
            cty: month
            hcl: month
            tfsdk: month
          x-order: 1
        relativeToLast:
          type: boolean
          description: Whether to apply the backup rotation scheme relative to the
            last successful backup instead to the current time
          default: true
          x-tf-name: relative_to_last
          x-oapi-codegen-extra-tags:
            cty: relative_to_last
            hcl: relative_to_last
            tfsdk: relative_to_last
          x-order: 2
        promoteLatestToHourly:
          type: boolean
          description: Whether to promote the latest backup within the hour if multiple
            backups exist for that hour
          x-tf-name: promote_latest_to_hourly
          x-oapi-codegen-extra-tags:
            cty: promote_latest_to_hourly
            hcl: promote_latest_to_hourly
            tfsdk: promote_latest_to_hourly
          x-order: 3
        promoteLatestToDaily:
          type: boolean
          description: Whether to promote the latest backup within the day if multiple
            backups exist for that day
          x-tf-name: promote_latest_to_daily
          x-oapi-codegen-extra-tags:
            cty: promote_latest_to_daily
            hcl: promote_latest_to_daily
            tfsdk: promote_latest_to_daily
          x-order: 4
        promoteLatestToMonthly:
          type: boolean
          description: Whether to promote the latest backup within the month if multiple
            backups exist for that month
          x-tf-name: promote_latest_to_monthly
          x-oapi-codegen-extra-tags:
            cty: promote_latest_to_monthly
            hcl: promote_latest_to_monthly
            tfsdk: promote_latest_to_monthly
          x-order: 5
      x-tf-name: settings
      x-oapi-codegen-extra-tags:
        cty: settings
        hcl: settings
        tfsdk: settings
    SelectorModel:
      required:
      - scope
      type: object
      properties:
        scope:
          pattern: "([*]|([a-z][a-z0-9]*/){0,2}[a-z][a-z0-9]*)"
          type: string
          description: The scope that the backup policy applies to
          x-tf-name: scope
          x-oapi-codegen-extra-tags:
            cty: scope
            hcl: scope
            tfsdk: scope
          x-order: 0
        slas:
          type: array
          description: The SLAs to filter databases on
          items:
            type: string
          x-tf-name: slas
          x-oapi-codegen-extra-tags:
            cty: slas
            hcl: slas
            tfsdk: slas
          x-order: 1
        tiers:
          type: array
          description: The tiers to filter databases on
          items:
            type: string
            x-enum-from: /cluster/servicetiers
          x-tf-name: tiers
          x-oapi-codegen-extra-tags:
            cty: tiers
            hcl: tiers
            tfsdk: tiers
          x-order: 2
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: The user-defined labels to filter databases on
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 3
      x-tf-name: selector
      x-oapi-codegen-extra-tags:
        cty: selector
        hcl: selector
        tfsdk: selector
    ExpandedListEntry:
      type: object
      properties:
        $ref:
          type: string
          description: The sub-path relative to the request URL that can be used to
            obtain the resource
          x-order: 0
    ItemList:
      type: object
      properties:
        offset:
          type: integer
          description: "The offset at which items are being listed, based on the user\
            \ request"
          format: int32
          x-order: 0
        cursor:
          type: string
          description: "The cursor at which items are being listed, based on the user\
            \ request"
          x-order: 1
        limit:
          type: integer
          description: "The maximum number of items that could have been returned,\
            \ based on the user request. If `limit` is equal to the number of items\
            \ returned, then it is possible that more items are available (see `next`),\
            \ which can be obtained by advancing the `offset` by `limit` or supplying\
            \ the last value in the list (or its `$ref`) as `cursor`."
          format: int32
          x-order: 2
        items:
          type: array
          description: "The list of items returned. If expansion of payload fields\
            \ was requested using the query parameter `expand` or `expand.<field>`,\
            \ then the items will be objects, otherwise, they will be strings representing\
            \ the sub-paths at which the resource can be found."
          items:
            type: object
            oneOf:
            - type: string
            - $ref: "#/components/schemas/ExpandedListEntry"
          x-order: 3
        next:
          type: string
          description: "The URL to obtain the next list of items, if `limit` was specified\
            \ and more items are available. The absence of the `next` field indicates\
            \ that all items have been returned."
          x-order: 4
        total:
          type: integer
          description: The total number of items available.
          format: int32
          x-order: 5
    JsonNode:
      type: object
      oneOf:
      - type: object
      - type: string
      - type: number
      - type: boolean
    JsonPatchOperation:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          enum:
          - add
          - remove
          - replace
          - move
          - copy
          - test
          x-order: 0
        from:
          pattern: /.*
          type: string
          x-order: 1
        path:
          minLength: 1
          pattern: /.*
          type: string
          x-order: 2
        value:
          $ref: "#/components/schemas/JsonNode"
    BackupModel:
      required:
      - database
      - name
      - organization
      - project
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the backup belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-order: 0
        project:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The project that the backup belongs to
          x-tf-name: project
          x-oapi-codegen-extra-tags:
            cty: project
            hcl: project
            tfsdk: project
          x-tf-identifier: true
          x-order: 1
        database:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The database that the backup belongs to
          x-tf-name: database
          x-oapi-codegen-extra-tags:
            cty: database
            hcl: database
            tfsdk: database
          x-tf-identifier: true
          x-order: 2
        name:
          pattern: "([0-9]+|[a-z][a-z0-9]*)"
          type: string
          description: The name of the backup
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-order: 3
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 4
        importSource:
          $ref: "#/components/schemas/ImportSourceModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 6
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        status:
          $ref: "#/components/schemas/BackupStatusModel"
    BackupStatusModel:
      type: object
      properties:
        creationTime:
          type: string
          description: The time that the backup was taken
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-tf-name: creation_time
          x-oapi-codegen-extra-tags:
            cty: creation_time
            hcl: creation_time
            tfsdk: creation_time
          x-go-type: string
          x-order: 0
        backupHandle:
          type: string
          description: The handle for the backup
          x-tf-name: backup_handle
          x-oapi-codegen-extra-tags:
            cty: backup_handle
            hcl: backup_handle
            tfsdk: backup_handle
          x-order: 1
        backupPlugin:
          type: string
          description: The plugin used to manage the backup
          x-tf-name: backup_plugin
          x-oapi-codegen-extra-tags:
            cty: backup_plugin
            hcl: backup_plugin
            tfsdk: backup_plugin
          x-order: 2
        readyToUse:
          type: boolean
          description: Whether the backup is ready to be used to restore a database
          x-tf-name: ready_to_use
          x-oapi-codegen-extra-tags:
            cty: ready_to_use
            hcl: ready_to_use
            tfsdk: ready_to_use
          x-order: 3
        message:
          type: string
          description: Message summarizing the state of the backup
          x-tf-name: message
          x-oapi-codegen-extra-tags:
            cty: message
            hcl: message
            tfsdk: message
          x-order: 4
        state:
          type: string
          description: |-
            The state of the backup:
              * `Pending` - The backup is pending completion
              * `Succeeded` - The backup completed successfully and is available for use
              * `Failed` - The backup failed and is unusable
              * `Deleting` - The backup has been marked for deletion, which is in progress
          enum:
          - Pending
          - Succeeded
          - Failed
          - Deleting
          x-enum-descriptions:
            Pending: The backup is pending completion
            Succeeded: The backup completed successfully and is available for use
            Failed: The backup failed and is unusable
            Deleting: "The backup has been marked for deletion, which is in progress"
          x-tf-name: state
          x-oapi-codegen-extra-tags:
            cty: state
            hcl: state
            tfsdk: state
          x-order: 5
        createdByPolicy:
          type: string
          description: The fully-qualified name of the backup policy that the backup
            was created by
          x-tf-name: created_by_policy
          x-oapi-codegen-extra-tags:
            cty: created_by_policy
            hcl: created_by_policy
            tfsdk: created_by_policy
          x-order: 6
        retainedAs:
          type: array
          description: The matching retention cycles by this backup
          items:
            type: string
            enum:
            - hourly
            - daily
            - weekly
            - monthly
            - yearly
          x-tf-name: retained_as
          x-oapi-codegen-extra-tags:
            cty: retained_as
            hcl: retained_as
            tfsdk: retained_as
          x-order: 7
        databaseProductVersion:
          type: string
          description: The product version of the database that the backup belongs
            to
          x-tf-name: database_product_version
          x-oapi-codegen-extra-tags:
            cty: database_product_version
            hcl: database_product_version
            tfsdk: database_product_version
          x-order: 8
      readOnly: true
      x-tf-name: status
      x-oapi-codegen-extra-tags:
        cty: status
        hcl: status
        tfsdk: status
    ImportSourceModel:
      required:
      - backupHandle
      - backupPlugin
      type: object
      properties:
        backupHandle:
          minLength: 1
          type: string
          description: The existing backup handle to import
          x-tf-name: backup_handle
          x-oapi-codegen-extra-tags:
            cty: backup_handle
            hcl: backup_handle
            tfsdk: backup_handle
          x-immutable: true
          x-order: 0
        backupPlugin:
          minLength: 1
          type: string
          description: The plugin used to create the backup to import
          x-tf-name: backup_plugin
          x-oapi-codegen-extra-tags:
            cty: backup_plugin
            hcl: backup_plugin
            tfsdk: backup_plugin
          x-immutable: true
          x-order: 1
      x-tf-name: import_source
      x-oapi-codegen-extra-tags:
        cty: import_source
        hcl: import_source
        tfsdk: import_source
    BackupCreateModel:
      required:
      - database
      - organization
      - project
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the backup belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-order: 0
        project:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The project that the backup belongs to
          x-tf-name: project
          x-oapi-codegen-extra-tags:
            cty: project
            hcl: project
            tfsdk: project
          x-tf-identifier: true
          x-order: 1
        database:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The database that the backup belongs to
          x-tf-name: database
          x-oapi-codegen-extra-tags:
            cty: database
            hcl: database
            tfsdk: database
          x-tf-identifier: true
          x-order: 2
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 3
    DatabaseModel:
      required:
      - name
      - organization
      - project
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the database belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-immutable: true
          x-order: 0
        project:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The project that the database belongs to
          x-tf-name: project
          x-oapi-codegen-extra-tags:
            cty: project
            hcl: project
            tfsdk: project
          x-tf-identifier: true
          x-immutable: true
          x-order: 1
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the database
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-immutable: true
          x-order: 2
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 3
        restoreFrom:
          $ref: "#/components/schemas/RestoreFromModel"
        tier:
          type: string
          description: "The service tier for the database. If omitted, the project\
            \ service tier is inherited."
          example: n0.small
          x-enum-from: /cluster/servicetiers
          x-tf-name: tier
          x-oapi-codegen-extra-tags:
            cty: tier
            hcl: tier
            tfsdk: tier
          x-order: 5
        maintenance:
          $ref: "#/components/schemas/MaintenanceModel"
        properties:
          $ref: "#/components/schemas/DatabasePropertiesModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 8
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        status:
          $ref: "#/components/schemas/DatabaseStatusModel"
    DatabasePropertiesModel:
      type: object
      properties:
        archiveDiskSize:
          pattern: "(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE])?"
          type: string
          description: The size of the archive volumes for the database. Can be only
            updated to increase the volume size.
          example: 2Ti
          x-tf-name: archive_disk_size
          x-oapi-codegen-extra-tags:
            cty: archive_disk_size
            hcl: archive_disk_size
            tfsdk: archive_disk_size
          x-order: 0
        journalDiskSize:
          pattern: "(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE])?"
          type: string
          description: The size of the journal volumes for the database. Can be only
            updated to increase the volume size.
          example: 50Gi
          x-tf-name: journal_disk_size
          x-oapi-codegen-extra-tags:
            cty: journal_disk_size
            hcl: journal_disk_size
            tfsdk: journal_disk_size
          x-order: 1
        tierParameters:
          type: object
          additionalProperties:
            type: string
          description: Opaque parameters supplied to database service tier.
          x-tf-name: tier_parameters
          x-oapi-codegen-extra-tags:
            cty: tier_parameters
            hcl: tier_parameters
            tfsdk: tier_parameters
          x-order: 2
        inheritTierParameters:
          type: boolean
          description: Whether to inherit tier parameters from the project if the
            database service tier matches the project.
          writeOnly: true
          x-order: 3
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        productVersion:
          pattern: "([1-9][0-9]*|[1-9][0-9]*\\.[0-9]+|[1-9][0-9]*\\.[0-9]+\\.[0-9]+)([._-][a-z0-9._-]+)?"
          type: string
          description: "The version/tag of the NuoDB image to use. For available tags,\
            \ see https://hub.docker.com/r/nuodb/nuodb/tags. If omitted, the database\
            \ version will be inherited from the project."
          x-tf-name: product_version
          x-oapi-codegen-extra-tags:
            cty: product_version
            hcl: product_version
            tfsdk: product_version
          x-order: 4
      x-tf-name: properties
      x-oapi-codegen-extra-tags:
        cty: properties
        hcl: properties
        tfsdk: properties
    DatabaseStatusModel:
      type: object
      properties:
        sqlEndpoint:
          type: string
          description: The endpoint for SQL clients to connect to
          x-tf-name: sql_endpoint
          x-oapi-codegen-extra-tags:
            cty: sql_endpoint
            hcl: sql_endpoint
            tfsdk: sql_endpoint
          x-order: 0
        caPem:
          type: string
          description: The PEM-encoded certificate for SQL clients to verify database
            servers
          x-tf-name: ca_pem
          x-oapi-codegen-extra-tags:
            cty: ca_pem
            hcl: ca_pem
            tfsdk: ca_pem
          x-order: 1
        ready:
          type: boolean
          description: Whether the database is ready
          x-tf-name: ready
          x-oapi-codegen-extra-tags:
            cty: ready
            hcl: ready
            tfsdk: ready
          x-order: 2
        shutdown:
          type: boolean
          description: Whether the database has shutdown
          x-tf-name: shutdown
          x-oapi-codegen-extra-tags:
            cty: shutdown
            hcl: shutdown
            tfsdk: shutdown
          x-order: 3
        message:
          type: string
          description: Message summarizing the state of the database
          x-tf-name: message
          x-oapi-codegen-extra-tags:
            cty: message
            hcl: message
            tfsdk: message
          x-order: 4
        state:
          type: string
          description: |-
            The state of the database:
              * `Available` - The database is ready to accept SQL connections
              * `Creating` - The database is being created and not yet available
              * `Modifying` - The database is being modified
              * `Stopping` - Shutdown is in progress for this database
              * `Stopped` - The database has been stopped
              * `Expired` - The database has expired
              * `Failed` - The database has failed to achieve a usable state
              * `Deleting` - The database has been marked for deletion, which is in progress
              * `Restoring` - Restore from backup is in progress for this database
              * `RotatingCertificates` - TLS certificates rotation is in progress for this database
          enum:
          - Available
          - Creating
          - Modifying
          - Stopping
          - Stopped
          - Expired
          - Failed
          - Deleting
          - Restoring
          - RotatingCertificates
          x-enum-descriptions:
            Available: The database is ready to accept SQL connections
            Creating: The database is being created and not yet available
            Modifying: The database is being modified
            Stopping: Shutdown is in progress for this database
            Stopped: The database has been stopped
            Expired: The database has expired
            Failed: The database has failed to achieve a usable state
            Deleting: "The database has been marked for deletion, which is in progress"
            Restoring: Restore from backup is in progress for this database
            RotatingCertificates: TLS certificates rotation is in progress for this
              database
          x-tf-name: state
          x-oapi-codegen-extra-tags:
            cty: state
            hcl: state
            tfsdk: state
          x-order: 5
      readOnly: true
      x-tf-name: status
      x-oapi-codegen-extra-tags:
        cty: status
        hcl: status
        tfsdk: status
    MaintenanceModel:
      type: object
      properties:
        expiresAtTime:
          type: string
          description: The time at which the project or database will be disabled
          format: date-time
          example: 2024-01-01T00:00:00Z
          x-order: 0
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        expiresIn:
          pattern: "(\\d+)\\s*([A-Za-zµ]+)"
          type: string
          description: "The time until the project or database is disabled, e.g. `1d`"
          example: 1d
          x-order: 1
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        isDisabled:
          type: boolean
          description: Whether the project or database should be shutdown
          x-tf-name: is_disabled
          x-oapi-codegen-extra-tags:
            cty: is_disabled
            hcl: is_disabled
            tfsdk: is_disabled
          x-order: 2
      x-tf-name: maintenance
      x-oapi-codegen-extra-tags:
        cty: maintenance
        hcl: maintenance
        tfsdk: maintenance
    RestoreFromModel:
      type: object
      properties:
        backup:
          pattern: "([a-z][a-z0-9]*/){0,3}([0-9]+|[a-z][a-z0-9]*)"
          type: string
          description: "The name of the backup to restore the database from. If a\
            \ fully-qualified name is not supplied, then the organization, project,\
            \ or name of the database being created is assumed."
          example: acme/messaging/demo/20240101120000
          x-tf-name: backup
          x-oapi-codegen-extra-tags:
            cty: backup
            hcl: backup
            tfsdk: backup
          x-immutable: true
          x-order: 0
      x-tf-name: restore_from
      x-oapi-codegen-extra-tags:
        cty: restore_from
        hcl: restore_from
        tfsdk: restore_from
    DatabaseCreateUpdateModel:
      required:
      - name
      - organization
      - project
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the database belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-immutable: true
          x-order: 0
        project:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The project that the database belongs to
          x-tf-name: project
          x-oapi-codegen-extra-tags:
            cty: project
            hcl: project
            tfsdk: project
          x-tf-identifier: true
          x-immutable: true
          x-order: 1
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the database
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-immutable: true
          x-order: 2
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 3
        dbaPassword:
          type: string
          description: The password for the DBA user. Can only be specified when creating
            a database.
          writeOnly: true
          x-tf-name: dba_password
          x-oapi-codegen-extra-tags:
            cty: dba_password
            hcl: dba_password
            tfsdk: dba_password
          x-tf-sensitive: true
          x-order: 4
        restoreFrom:
          $ref: "#/components/schemas/RestoreFromModel"
        tier:
          type: string
          description: "The service tier for the database. If omitted, the project\
            \ service tier is inherited."
          example: n0.small
          x-enum-from: /cluster/servicetiers
          x-tf-name: tier
          x-oapi-codegen-extra-tags:
            cty: tier
            hcl: tier
            tfsdk: tier
          x-order: 6
        maintenance:
          $ref: "#/components/schemas/MaintenanceModel"
        properties:
          $ref: "#/components/schemas/DatabasePropertiesModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 9
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        status:
          $ref: "#/components/schemas/DatabaseStatusModel"
    UpdateDbaPasswordModel:
      required:
      - current
      type: object
      properties:
        current:
          minLength: 1
          type: string
          description: "The current DBA password, which must be supplied for verification\
            \ purposes"
          x-order: 0
        target:
          type: string
          description: The target DBA password
          x-order: 1
        resync:
          type: boolean
          description: "Whether to update configured DBA password so that it matches\
            \ actual DBA password. If `true`, `current` is verified by connecting\
            \ to the database directly before updating configured DBA password."
          x-order: 2
    DbaasAccessRuleModel:
      type: object
      properties:
        allow:
          type: array
          description: "List of access rule entries in the form `<verb>:<resource\
            \ specifier>[:<SLA>]` that specify requests to allow"
          items:
            type: string
          x-tf-name: allow
          x-oapi-codegen-extra-tags:
            cty: allow
            hcl: allow
            tfsdk: allow
          x-order: 0
        deny:
          type: array
          description: List of access rule entries in the form `<verb>:<resource specifier>`
            that specify requests to deny
          items:
            type: string
          x-tf-name: deny
          x-oapi-codegen-extra-tags:
            cty: deny
            hcl: deny
            tfsdk: deny
          x-order: 1
      description: The rule specifying access for the user
      x-tf-name: access_rule
      x-oapi-codegen-extra-tags:
        cty: access_rule
        hcl: access_rule
        tfsdk: access_rule
    LoginResponseModel:
      type: object
      properties:
        token:
          type: string
          description: The authentication/authorization token
          x-order: 0
        accessRule:
          $ref: "#/components/schemas/DbaasAccessRuleModel"
        expiresAtTime:
          type: string
          description: The token expiration time
          x-order: 2
    LoginRequestModel:
      type: object
      properties:
        limitAllow:
          type: array
          description: "The allow rule entries to use for the token, which cannot\
            \ exceed the access of the current user"
          items:
            type: string
          x-order: 0
        extraDeny:
          type: array
          description: Extra deny rules entries to append to the access rule to further
            restrict access granted by the token
          items:
            type: string
          x-order: 1
        expiresIn:
          type: string
          description: "Requested seconds, minutes, hours or days (s,m,h,d) when token\
            \ should expire"
          x-order: 2
        expiresAtTime:
          type: string
          description: Requested timestamp when token should expire (in ISO-8601 format)
          x-order: 3
    ProjectModel:
      required:
      - name
      - organization
      - sla
      - tier
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the project belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-immutable: true
          x-order: 0
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the project
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-immutable: true
          x-order: 1
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 2
        sla:
          minLength: 1
          type: string
          description: The SLA for the project. Cannot be updated once the project
            is created.
          example: dev
          x-tf-name: sla
          x-oapi-codegen-extra-tags:
            cty: sla
            hcl: sla
            tfsdk: sla
          x-immutable: true
          x-order: 3
        tier:
          minLength: 1
          type: string
          description: The service tier for the project
          example: n0.small
          x-enum-from: /cluster/servicetiers
          x-tf-name: tier
          x-oapi-codegen-extra-tags:
            cty: tier
            hcl: tier
            tfsdk: tier
          x-order: 4
        maintenance:
          $ref: "#/components/schemas/MaintenanceModel"
        properties:
          $ref: "#/components/schemas/ProjectPropertiesModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 7
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
        status:
          $ref: "#/components/schemas/ProjectStatusModel"
    ProjectPropertiesModel:
      type: object
      properties:
        tierParameters:
          type: object
          additionalProperties:
            type: string
          description: Opaque parameters supplied to project service tier.
          x-tf-name: tier_parameters
          x-oapi-codegen-extra-tags:
            cty: tier_parameters
            hcl: tier_parameters
            tfsdk: tier_parameters
          x-order: 0
        productVersion:
          pattern: "([1-9][0-9]*|[1-9][0-9]*\\.[0-9]+|[1-9][0-9]*\\.[0-9]+\\.[0-9]+)([._-][a-z0-9._-]+)?"
          type: string
          description: "The version/tag of the NuoDB image to use. For available tags,\
            \ see https://hub.docker.com/r/nuodb/nuodb/tags. If omitted, the project\
            \ version will be resolved based on the SLA and cluster configuration."
          x-tf-name: product_version
          x-oapi-codegen-extra-tags:
            cty: product_version
            hcl: product_version
            tfsdk: product_version
          x-order: 1
      x-tf-name: properties
      x-oapi-codegen-extra-tags:
        cty: properties
        hcl: properties
        tfsdk: properties
    ProjectStatusModel:
      type: object
      properties:
        caPem:
          type: string
          description: The PEM-encoded certificate for SQL clients to verify database
            servers within the project
          x-tf-name: ca_pem
          x-oapi-codegen-extra-tags:
            cty: ca_pem
            hcl: ca_pem
            tfsdk: ca_pem
          x-order: 0
        ready:
          type: boolean
          description: Whether the project is ready
          x-tf-name: ready
          x-oapi-codegen-extra-tags:
            cty: ready
            hcl: ready
            tfsdk: ready
          x-order: 1
        shutdown:
          type: boolean
          description: Whether the project and all of its databases have shutdown
          x-tf-name: shutdown
          x-oapi-codegen-extra-tags:
            cty: shutdown
            hcl: shutdown
            tfsdk: shutdown
          x-order: 2
        message:
          type: string
          description: Message summarizing the state of the project
          x-tf-name: message
          x-oapi-codegen-extra-tags:
            cty: message
            hcl: message
            tfsdk: message
          x-order: 3
        state:
          type: string
          description: |-
            The state of the project:
              * `Available` - The project is available
              * `Creating` - The project is being created and not yet available
              * `Modifying` - The project is being modified
              * `Stopping` - Shutdown is in progress for this project
              * `Stopped` - The project and its databases have been stopped
              * `Expired` - The project and its databases have expired
              * `Failed` - The project has failed to achieve a usable state
              * `Deleting` - The project has been marked for deletion, which is in progress
              * `RotatingCertificates` - TLS certificates rotation is in progress for this domain
          enum:
          - Available
          - Creating
          - Modifying
          - Stopping
          - Stopped
          - Expired
          - Failed
          - Deleting
          - RotatingCertificates
          x-enum-descriptions:
            Available: The project is available
            Creating: The project is being created and not yet available
            Modifying: The project is being modified
            Stopping: Shutdown is in progress for this project
            Stopped: The project and its databases have been stopped
            Expired: The project and its databases have expired
            Failed: The project has failed to achieve a usable state
            Deleting: "The project has been marked for deletion, which is in progress"
            RotatingCertificates: TLS certificates rotation is in progress for this
              domain
          x-tf-name: state
          x-oapi-codegen-extra-tags:
            cty: state
            hcl: state
            tfsdk: state
          x-order: 4
      readOnly: true
      x-tf-name: status
      x-oapi-codegen-extra-tags:
        cty: status
        hcl: status
        tfsdk: status
    DbaasUserModel:
      required:
      - accessRule
      - name
      - organization
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the user belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-order: 0
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the user
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-order: 1
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 2
        roles:
          type: array
          description: List of roles for user
          items:
            $ref: "#/components/schemas/RoleModel"
          x-tf-name: roles
          x-oapi-codegen-extra-tags:
            cty: roles
            hcl: roles
            tfsdk: roles
          x-order: 3
        accessRule:
          $ref: "#/components/schemas/DbaasAccessRuleModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 5
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
    RoleModel:
      required:
      - name
      type: object
      properties:
        name:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: string
          description: The name of the role template
          x-enum-from: /cluster/roletemplates
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-order: 0
        params:
          pattern: "[a-z][a-z0-9]*"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: "The parameters to apply to the role template. These parameters\
            \ take precedence over the `organization` and `user`/`name` properties\
            \ of the user and any user labels, which are implicitly used to resolve\
            \ parameters appearing in the `allow` entries of the role template."
          x-tf-name: params
          x-oapi-codegen-extra-tags:
            cty: params
            hcl: params
            tfsdk: params
          x-order: 1
    DbaasUserCreateUpdateModel:
      required:
      - accessRule
      - name
      - organization
      type: object
      properties:
        organization:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The organization that the user belongs to
          x-tf-name: organization
          x-oapi-codegen-extra-tags:
            cty: organization
            hcl: organization
            tfsdk: organization
          x-tf-identifier: true
          x-order: 0
        name:
          maxLength: 63
          minLength: 1
          pattern: "[a-z][a-z0-9]*"
          type: string
          description: The name of the user
          x-tf-name: name
          x-oapi-codegen-extra-tags:
            cty: name
            hcl: name
            tfsdk: name
          x-tf-identifier: true
          x-order: 1
        labels:
          pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
          type: object
          additionalProperties:
            pattern: "(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])"
            type: string
          description: User-defined labels attached to the resource that can be used
            for filtering
          x-tf-name: labels
          x-oapi-codegen-extra-tags:
            cty: labels
            hcl: labels
            tfsdk: labels
          x-order: 2
        roles:
          type: array
          description: List of roles for user
          items:
            $ref: "#/components/schemas/RoleModel"
          x-tf-name: roles
          x-oapi-codegen-extra-tags:
            cty: roles
            hcl: roles
            tfsdk: roles
          x-order: 3
        password:
          type: string
          description: The password for the user
          writeOnly: true
          x-tf-name: password
          x-oapi-codegen-extra-tags:
            cty: password
            hcl: password
            tfsdk: password
          x-tf-sensitive: true
          x-order: 4
        accessRule:
          $ref: "#/components/schemas/DbaasAccessRuleModel"
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 6
          x-oapi-codegen-extra-tags:
            tfsdk: "-"
    CanaryRolloutTemplateModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/CanaryRolloutTemplateSpec"
        status:
          $ref: "#/components/schemas/CanaryRolloutTemplateStatus"
    CanaryRolloutTemplateSpec:
      required:
      - steps
      type: object
      properties:
        analysis:
          type: array
          description: Analysis performed after every promotion step.
          items:
            $ref: "#/components/schemas/canaryrollouttemplatespec_Analysis"
          x-order: 0
        skipDisabled:
          type: boolean
          description: |-
            Skip disabled target resources. By default a change is promoted to all
            matching resources.
          x-order: 1
        steps:
          type: array
          description: Canary rollout steps for this template.
          items:
            $ref: "#/components/schemas/Steps"
          x-order: 2
    CanaryRolloutTemplateStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions holds the conditions for the service tier.
          items:
            $ref: "#/components/schemas/canaryrollouttemplatestatus_Conditions"
          x-order: 0
      readOnly: true
    Pause:
      type: object
      properties:
        duration:
          type: string
          description: |-
            The duration for which the rollout is paused. Zero duration means wait
            until manually approved.
          x-order: 0
    PromoteTo:
      type: object
      properties:
        labelSelector:
          $ref: "#/components/schemas/canaryrollouttemplatespec_steps_promoteto_LabelSelector"
        limitCount:
          type: integer
          description: |-
            Limit the promotion to certain number of the matching resources. The
            supplied limit is cumulative accross promote steps (i.e. total number of
            targets to be promoted).
          format: int32
          x-order: 1
        limitPercentage:
          type: integer
          description: |-
            Limit the promotion to certain percentage of the matching resources. The
            supplied limit is cumulative accross promote steps (i.e. total percentage
            of targets to be promoted).
          format: int32
          x-order: 2
        rollback:
          $ref: "#/components/schemas/Rollback"
    Rollback:
      required:
      - strategy
      type: object
      properties:
        backoffLimit:
          type: integer
          description: Specifies the number of retries before giving up on rollback.
            Defaults to 20.
          format: int32
          x-order: 0
        strategy:
          type: string
          description: The rollback strategy.
          enum:
          - None
          - Failed
          - Step
          x-order: 1
    Steps:
      type: object
      properties:
        analysis:
          $ref: "#/components/schemas/canaryrollouttemplatespec_steps_Analysis"
        pause:
          $ref: "#/components/schemas/Pause"
        promoteTo:
          $ref: "#/components/schemas/PromoteTo"
    canaryrollouttemplatespec_Analysis:
      required:
      - name
      type: object
      properties:
        checkStatusCondition:
          $ref: "#/components/schemas/canaryrollouttemplatespec_analysis_CheckStatusCondition"
        executionDeadlineSeconds:
          type: integer
          description: |-
            Optional deadline in seconds for executing this analaysis. Analysis runs
            that exceed the specified deadline are interrupted and retried later.
            Defaults to 60s.
          format: int32
          x-order: 1
        interval:
          type: string
          description: Interval in which the analysis is run. Defaults to 60s.
          x-order: 2
        name:
          type: string
          description: The analysis name.
          x-order: 3
        runOnDisabled:
          type: boolean
          description: |-
            Run the analysis on disabled targets. By default the analysis is skipped
            on disabled resources.
          x-order: 4
    canaryrollouttemplatespec_analysis_CheckStatusCondition:
      required:
      - status
      - timeout
      - type
      type: object
      properties:
        status:
          type: string
          description: The required condition status.
          x-order: 0
        timeout:
          type: string
          description: A timeout after which an analysis is declared as failed.
          x-order: 1
        type:
          type: string
          description: The condition type to perform analysis on.
          x-order: 2
    canaryrollouttemplatespec_steps_Analysis:
      required:
      - name
      type: object
      properties:
        checkStatusCondition:
          $ref: "#/components/schemas/canaryrollouttemplatespec_steps_analysis_CheckStatusCondition"
        executionDeadlineSeconds:
          type: integer
          description: |-
            Optional deadline in seconds for executing this analaysis. Analysis runs
            that exceed the specified deadline are interrupted and retried later.
            Defaults to 60s.
          format: int32
          x-order: 1
        interval:
          type: string
          description: Interval in which the analysis is run. Defaults to 60s.
          x-order: 2
        name:
          type: string
          description: The analysis name.
          x-order: 3
        runOnDisabled:
          type: boolean
          description: |-
            Run the analysis on disabled targets. By default the analysis is skipped
            on disabled resources.
          x-order: 4
    canaryrollouttemplatespec_steps_analysis_CheckStatusCondition:
      required:
      - status
      - timeout
      - type
      type: object
      properties:
        status:
          type: string
          description: The required condition status.
          x-order: 0
        timeout:
          type: string
          description: A timeout after which an analysis is declared as failed.
          x-order: 1
        type:
          type: string
          description: The condition type to perform analysis on.
          x-order: 2
    canaryrollouttemplatespec_steps_promoteto_LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: "#/components/schemas/canaryrollouttemplatespec_steps_promoteto_labelselector_MatchExpressions"
          x-order: 0
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: |-
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
          x-order: 1
    canaryrollouttemplatespec_steps_promoteto_labelselector_MatchExpressions:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          x-order: 0
        operator:
          type: string
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
          x-order: 1
        values:
          type: array
          description: |-
            values is an array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
          items:
            type: string
          x-order: 2
    canaryrollouttemplatestatus_Conditions:
      required:
      - lastTransitionTime
      - message
      - reason
      - status
      - type
      type: object
      properties:
        lastTransitionTime:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: |-
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
          format: date-time
          x-order: 0
        message:
          type: string
          description: |-
            message is a human readable message indicating details about the transition.
            This may be an empty string.
          x-order: 1
        observedGeneration:
          type: integer
          description: |-
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
          format: int64
          x-order: 2
        reason:
          type: string
          description: |-
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
          x-order: 3
        status:
          type: string
          description: "status of the condition, one of True, False, Unknown."
          enum:
          - "True"
          - "False"
          - Unknown
          x-order: 4
        type:
          type: string
          description: |-
            type of condition in CamelCase or in foo.example.com/CamelCase.
            ---
            Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
            useful (see .node.status.conditions), the ability to deconflict is important.
            The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          x-order: 5
    AnalysisRun:
      required:
      - name
      - result
      type: object
      properties:
        endTime:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: Analysis end time is the analysis completion time.
          format: date-time
          x-order: 0
        message:
          type: string
          description: The human readable message indicating details about the analysis
            run.
          x-order: 1
        name:
          type: string
          description: The name of the analysis.
          x-order: 2
        result:
          type: string
          description: The result of the analysis run.
          enum:
          - Skipped
          - Failed
          - Succeeded
          - Pending
          x-order: 3
        startTime:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: |-
            Analysis start time is the initial time when the analysis run was
            performed without an error.
          format: date-time
          x-order: 4
    AnyType:
      type: object
      additionalProperties:
        oneOf:
        - type: object
        - type: string
        - type: number
        - type: boolean
    CanaryRolloutModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/CanaryRolloutSpec"
        status:
          $ref: "#/components/schemas/CanaryRolloutStatus"
    CanaryRolloutSpec:
      required:
      - patch
      - rolloutTemplate
      type: object
      properties:
        patch:
          $ref: "#/components/schemas/AnyType"
        rolloutTemplate:
          $ref: "#/components/schemas/RolloutTemplate"
        selector:
          $ref: "#/components/schemas/canaryrolloutspec_Selector"
        stepBackoffLimit:
          type: integer
          description: |-
            Specifies the number of retries before declaring a step and this canary
            rollout as failed. Defaults to 20.
          format: int32
          x-order: 3
    CanaryRolloutStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions holds the conditions for the canary rollout.
          items:
            $ref: "#/components/schemas/canaryrolloutstatus_Conditions"
          x-order: 0
        currentStepFailures:
          type: integer
          description: |-
            The number of reconciliation failure count for the current step. It is
            reset after step completion.
          format: int32
          x-order: 1
        currentStepIndex:
          type: integer
          description: The step index which the rollout is currently on.
          format: int32
          x-order: 2
        lastObservedConfigChecksum:
          type: string
          description: |-
            The SHA1 checksum of rollout configuration used in the last
            reconciliation attempt. If a checksum change is detected, the rollout is
            restarted.
          x-order: 3
        lastPromotedFromIndex:
          type: integer
          description: The step index which last promoted targets.
          format: int32
          x-order: 4
        lastPromotedTargets:
          type: array
          description: Targets to which the change is being promoted by the last promote
            step.
          items:
            $ref: "#/components/schemas/LastPromotedTargets"
          x-order: 5
        observedGeneration:
          type: integer
          description: The generation observed by the controller from metadata.generation.
          format: int64
          x-order: 6
      readOnly: true
    LastPromotedTargets:
      required:
      - apiGroup
      - kind
      - name
      type: object
      properties:
        analysisRun:
          type: array
          description: Information about performed analysis run against the target.
          items:
            $ref: "#/components/schemas/AnalysisRun"
          x-order: 0
        apiGroup:
          type: string
          description: APIGroup is the group for the resource being referenced.
          x-order: 1
        kind:
          type: string
          description: Kind is the type of resource being referenced.
          x-order: 2
        name:
          type: string
          description: Name is the name of resource being referenced
          x-order: 3
    RolloutTemplate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the referent
          x-order: 0
    canaryrolloutspec_Selector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: "#/components/schemas/canaryrolloutspec_selector_MatchExpressions"
          x-order: 0
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: |-
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
          x-order: 1
    canaryrolloutspec_selector_MatchExpressions:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          x-order: 0
        operator:
          type: string
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
          x-order: 1
        values:
          type: array
          description: |-
            values is an array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
          items:
            type: string
          x-order: 2
    canaryrolloutstatus_Conditions:
      required:
      - lastTransitionTime
      - message
      - reason
      - status
      - type
      type: object
      properties:
        lastTransitionTime:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: |-
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
          format: date-time
          x-order: 0
        message:
          type: string
          description: |-
            message is a human readable message indicating details about the transition.
            This may be an empty string.
          x-order: 1
        observedGeneration:
          type: integer
          description: |-
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
          format: int64
          x-order: 2
        reason:
          type: string
          description: |-
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
          x-order: 3
        status:
          type: string
          description: "status of the condition, one of True, False, Unknown."
          enum:
          - "True"
          - "False"
          - Unknown
          x-order: 4
        type:
          type: string
          description: |-
            type of condition in CamelCase or in foo.example.com/CamelCase.
            ---
            Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
            useful (see .node.status.conditions), the ability to deconflict is important.
            The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          x-order: 5
    DatabaseQuotaModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/DatabaseQuotaSpec"
        status:
          $ref: "#/components/schemas/DatabaseQuotaStatus"
    DatabaseQuotaSpec:
      type: object
      properties:
        hard:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IntOrString"
          description: The set of desired hard limits for each named resource.
          x-order: 0
        scope:
          $ref: "#/components/schemas/Scope"
    DatabaseQuotaStatus:
      type: object
      properties:
        lastEnforced:
          type: array
          description: |-
            The information about objects on which this quota has been enforced.
            It is cleared by the quota controller after a successful
            reconciliation.
          items:
            $ref: "#/components/schemas/LastEnforced"
          x-order: 0
        observedGeneration:
          type: integer
          description: The last observed generation.
          format: int64
          x-order: 1
        used:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/IntOrString"
          description: |-
            The current observed total usage of the named resources per scoped
            group.
          x-order: 2
      readOnly: true
    FieldSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: "The list of field selector requirements, which are composed\
            \ with `AND`."
          items:
            $ref: "#/components/schemas/databasequotaspec_scope_fieldselector_MatchExpressions"
          x-order: 0
        matchFields:
          type: object
          additionalProperties:
            type: string
          description: |-
            The field selector requirements as a map where each key-value pair is
            equivalent to an element of `matchExpressions` with `operator` set to
            `==`. The requirements are composed with `AND`.
          x-order: 1
    IntOrString:
      type: object
      oneOf:
      - type: integer
        format: int32
      - type: string
    LastEnforced:
      required:
      - enforceTimestamp
      - objectRef
      type: object
      properties:
        enforceTimestamp:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: |-
            Timestamp is a timestamp representing the server time when this quota was
            enforced on a selected object.
          format: date-time
          x-order: 0
        objectGeneration:
          type: integer
          description: The generation that the object had at the time of quota enforcement.
          format: int64
          x-order: 1
        objectRef:
          $ref: "#/components/schemas/ObjectRef"
    ObjectRef:
      required:
      - apiGroup
      - kind
      - name
      type: object
      properties:
        apiGroup:
          type: string
          description: APIGroup is the group for the resource being referenced.
          x-order: 0
        kind:
          type: string
          description: Kind is the type of resource being referenced.
          x-order: 1
        name:
          type: string
          description: Name is the name of resource being referenced
          x-order: 2
    Scope:
      type: object
      properties:
        fieldSelector:
          $ref: "#/components/schemas/FieldSelector"
        groupByLabels:
          type: array
          description: |-
            The label keys on which the selected databases are divided into
            groups.
          items:
            type: string
          x-order: 1
        labelSelector:
          $ref: "#/components/schemas/databasequotaspec_scope_LabelSelector"
    databasequotaspec_scope_LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: "#/components/schemas/databasequotaspec_scope_labelselector_MatchExpressions"
          x-order: 0
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: |-
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
          x-order: 1
    databasequotaspec_scope_fieldselector_MatchExpressions:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: The path of the field to apply the selector requirement to.
          x-order: 0
        operator:
          type: string
          description: "The operator to apply to the field value. One of `=`, `==`,\
            \ and `!=`."
          x-order: 1
        value:
          type: string
          description: The value to compare to.
          x-order: 2
    databasequotaspec_scope_labelselector_MatchExpressions:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          x-order: 0
        operator:
          type: string
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
          x-order: 1
        values:
          type: array
          description: |-
            values is an array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
          items:
            type: string
          x-order: 2
    HelmFeatureModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/HelmFeatureSpec"
        status:
          $ref: "#/components/schemas/HelmFeatureStatus"
    HelmFeatureSpec:
      type: object
      properties:
        chartCompatibility:
          type: string
          description: The Helm chart version compatibility constraint for the Helm
            feature.
          x-order: 0
        optional:
          type: boolean
          description: |-
            Whether the Helm feature is optional and does not emit an error
            if the Helm chart or product version is incompatible.
          x-order: 1
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Parameters"
          description: |-
            The parameter definitions referenced in values. For example, parameter
            named `foo` is referenced using `<< .meta.params.foo >>` template.
          x-order: 2
        productCompatibility:
          type: string
          description: |-
            The NuoDB product version compatibility constraint for the
            Helm feature.
          x-order: 3
        values:
          $ref: "#/components/schemas/AnyType"
    HelmFeatureStatus:
      type: object
      properties:
        history:
          $ref: "#/components/schemas/helmfeaturestatus_History"
      readOnly: true
    Parameters:
      type: object
      properties:
        default:
          type: string
          x-order: 0
        description:
          type: string
          description: The parameter's description.
          x-order: 1
        jsonSchema:
          type: string
          description: A JSONSchema used to validate the parameter's value.
          x-order: 2
    helmfeaturestatus_History:
      type: object
      properties:
        revisions:
          type: array
          description: Resource revisions.
          items:
            $ref: "#/components/schemas/helmfeaturestatus_history_Revisions"
          x-order: 0
    helmfeaturestatus_history_Revisions:
      required:
      - creationTimestamp
      - generation
      - spec
      type: object
      properties:
        creationTimestamp:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: A timestamp representing the server time when this version
            was created.
          format: date-time
          x-order: 0
        generation:
          type: integer
          description: |-
            A sequence number representing a specific generation of the desired
            state stored in the revision.
          format: int64
          x-order: 1
        spec:
          type: string
          description: The encoded versioned resource desired state.
          x-order: 2
    Allow:
      required:
      - resource
      - verb
      type: object
      properties:
        resource:
          type: string
          description: |-
            The resource or set of resources to grant access to. If the value
            begins with a slash (`/`), then the value denotes a resource path.
            Otherwise, the value denotes a scope in the hierarchy of the DBaaS
            resources that this access rule entry grants access to, of the form
            `<organization>`, `<organization>/<project>`, or
            `<organization>/<project>/<database>`. In either case, parameterized
            path segments of the form `{organization}` or `{user}` may appear
            that are resolved when the role template is assigned to a user.
          x-order: 0
        sla:
          type: string
          description: |-
            The SLA to constrain access to. This constraint only applies to
            projects and resources contained within projects, such as databases
            and backups.
          x-order: 1
        verb:
          type: string
          description: |-
            The verb to grant access to with this access rule entry, which maps
            to HTTP request methods as follows:


            - `read`: GET
            - `write`: PUT, POST
            - `delete`: DELETE


            `all` denotes that the request method is unconstrained for this
            access rule entry.
          enum:
          - read
          - write
          - delete
          - all
          x-order: 2
    RoleTemplateModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/RoleTemplateSpec"
        status:
          $ref: "#/components/schemas/RoleTemplateStatus"
    RoleTemplateSpec:
      type: object
      properties:
        allow:
          type: array
          description: List of access rule entries to allow.
          items:
            $ref: "#/components/schemas/Allow"
          x-order: 0
    RoleTemplateStatus:
      type: object
      readOnly: true
    Canary:
      required:
      - templateRef
      type: object
      properties:
        templateRef:
          $ref: "#/components/schemas/TemplateRef"
    Features:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the resource.
          x-order: 0
        namespace:
          type: string
          description: |-
            The namespace of the resource. When not specified, the current
            namespace is assumed.
          x-order: 1
        revision:
          type: string
          description: Revision of the Helm feature used by this revision of the service
            tier.
          x-order: 2
    ServiceTierModel:
      required:
      - name
      - spec
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the resource
          x-order: 0
        description:
          type: string
          description: Human-readable description of the resource
          x-order: 1
        resourceVersion:
          type: string
          description: "The version of the resource. When specified in a `PUT` request\
            \ payload, indicates that the resoure should be updated, and is used by\
            \ the system to guard against concurrent updates."
          x-order: 2
        spec:
          $ref: "#/components/schemas/ServiceTierSpec"
        status:
          $ref: "#/components/schemas/ServiceTierStatus"
    ServiceTierSpec:
      type: object
      properties:
        features:
          type: array
          description: The list of Helm features enabled for this service tier.
          items:
            $ref: "#/components/schemas/Features"
          x-order: 0
        updateStrategy:
          $ref: "#/components/schemas/UpdateStrategy"
    ServiceTierStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions holds the conditions for the service tier.
          items:
            $ref: "#/components/schemas/servicetierstatus_Conditions"
          x-order: 0
        history:
          $ref: "#/components/schemas/servicetierstatus_History"
      readOnly: true
    TemplateRef:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the referent
          x-order: 0
    UpdateStrategy:
      required:
      - type
      type: object
      properties:
        canary:
          $ref: "#/components/schemas/Canary"
        type:
          type: string
          description: The service tier update strategy type. Defaults to Immediate.
          enum:
          - CanaryRollout
          - Immediate
          x-order: 1
    servicetierstatus_Conditions:
      required:
      - lastTransitionTime
      - message
      - reason
      - status
      - type
      type: object
      properties:
        lastTransitionTime:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: |-
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
          format: date-time
          x-order: 0
        message:
          type: string
          description: |-
            message is a human readable message indicating details about the transition.
            This may be an empty string.
          x-order: 1
        observedGeneration:
          type: integer
          description: |-
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
          format: int64
          x-order: 2
        reason:
          type: string
          description: |-
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
          x-order: 3
        status:
          type: string
          description: "status of the condition, one of True, False, Unknown."
          enum:
          - "True"
          - "False"
          - Unknown
          x-order: 4
        type:
          type: string
          description: |-
            type of condition in CamelCase or in foo.example.com/CamelCase.
            ---
            Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
            useful (see .node.status.conditions), the ability to deconflict is important.
            The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          x-order: 5
    servicetierstatus_History:
      type: object
      properties:
        revisions:
          type: array
          description: Resource revisions.
          items:
            $ref: "#/components/schemas/servicetierstatus_history_Revisions"
          x-order: 0
    servicetierstatus_history_Revisions:
      required:
      - creationTimestamp
      - generation
      - spec
      type: object
      properties:
        creationTimestamp:
          pattern: yyyy-MM-dd'T'HH:mm:ssVV
          type: string
          description: A timestamp representing the server time when this version
            was created.
          format: date-time
          x-order: 0
        generation:
          type: integer
          description: |-
            A sequence number representing a specific generation of the desired
            state stored in the revision.
          format: int64
          x-order: 1
        spec:
          type: string
          description: The encoded versioned resource desired state.
          x-order: 2
    BackupEventModel:
      type: object
      properties:
        id:
          type: string
          description: The name of the resource the event is on relative to the request
            path
          x-order: 0
        event:
          type: string
          description: |-
            The type of event:
              * `RESYNC` - The event stream was established and the current state of the resource is being returned
              * `CREATED` - The resource was created
              * `UPDATED` - The resource was updated
              * `DELETED` - The resource was deleted
              * `HEARTBEAT` - The server is sending an empty message to ensure that the event stream remains open
          enum:
          - RESYNC
          - CREATED
          - UPDATED
          - DELETED
          - HEARTBEAT
          x-enum-descriptions:
            RESYNC: The event stream was established and the current state of the
              resource is being returned
            CREATED: The resource was created
            UPDATED: The resource was updated
            DELETED: The resource was deleted
            HEARTBEAT: The server is sending an empty message to ensure that the event
              stream remains open
          x-order: 1
        data:
          $ref: "#/components/schemas/BackupModel"
    BackupPolicyEventModel:
      type: object
      properties:
        id:
          type: string
          description: The name of the resource the event is on relative to the request
            path
          x-order: 0
        event:
          type: string
          description: |-
            The type of event:
              * `RESYNC` - The event stream was established and the current state of the resource is being returned
              * `CREATED` - The resource was created
              * `UPDATED` - The resource was updated
              * `DELETED` - The resource was deleted
              * `HEARTBEAT` - The server is sending an empty message to ensure that the event stream remains open
          enum:
          - RESYNC
          - CREATED
          - UPDATED
          - DELETED
          - HEARTBEAT
          x-enum-descriptions:
            RESYNC: The event stream was established and the current state of the
              resource is being returned
            CREATED: The resource was created
            UPDATED: The resource was updated
            DELETED: The resource was deleted
            HEARTBEAT: The server is sending an empty message to ensure that the event
              stream remains open
          x-order: 1
        data:
          $ref: "#/components/schemas/BackupPolicyModel"
    DatabaseEventModel:
      type: object
      properties:
        id:
          type: string
          description: The name of the resource the event is on relative to the request
            path
          x-order: 0
        event:
          type: string
          description: |-
            The type of event:
              * `RESYNC` - The event stream was established and the current state of the resource is being returned
              * `CREATED` - The resource was created
              * `UPDATED` - The resource was updated
              * `DELETED` - The resource was deleted
              * `HEARTBEAT` - The server is sending an empty message to ensure that the event stream remains open
          enum:
          - RESYNC
          - CREATED
          - UPDATED
          - DELETED
          - HEARTBEAT
          x-enum-descriptions:
            RESYNC: The event stream was established and the current state of the
              resource is being returned
            CREATED: The resource was created
            UPDATED: The resource was updated
            DELETED: The resource was deleted
            HEARTBEAT: The server is sending an empty message to ensure that the event
              stream remains open
          x-order: 1
        data:
          $ref: "#/components/schemas/DatabaseModel"
    ProjectEventModel:
      type: object
      properties:
        id:
          type: string
          description: The name of the resource the event is on relative to the request
            path
          x-order: 0
        event:
          type: string
          description: |-
            The type of event:
              * `RESYNC` - The event stream was established and the current state of the resource is being returned
              * `CREATED` - The resource was created
              * `UPDATED` - The resource was updated
              * `DELETED` - The resource was deleted
              * `HEARTBEAT` - The server is sending an empty message to ensure that the event stream remains open
          enum:
          - RESYNC
          - CREATED
          - UPDATED
          - DELETED
          - HEARTBEAT
          x-enum-descriptions:
            RESYNC: The event stream was established and the current state of the
              resource is being returned
            CREATED: The resource was created
            UPDATED: The resource was updated
            DELETED: The resource was deleted
            HEARTBEAT: The server is sending an empty message to ensure that the event
              stream remains open
          x-order: 1
        data:
          $ref: "#/components/schemas/ProjectModel"
    UserEventModel:
      type: object
      properties:
        id:
          type: string
          description: The name of the resource the event is on relative to the request
            path
          x-order: 0
        event:
          type: string
          description: |-
            The type of event:
              * `RESYNC` - The event stream was established and the current state of the resource is being returned
              * `CREATED` - The resource was created
              * `UPDATED` - The resource was updated
              * `DELETED` - The resource was deleted
              * `HEARTBEAT` - The server is sending an empty message to ensure that the event stream remains open
          enum:
          - RESYNC
          - CREATED
          - UPDATED
          - DELETED
          - HEARTBEAT
          x-enum-descriptions:
            RESYNC: The event stream was established and the current state of the
              resource is being returned
            CREATED: The resource was created
            UPDATED: The resource was updated
            DELETED: The resource was deleted
            HEARTBEAT: The server is sending an empty message to ensure that the event
              stream remains open
          x-order: 1
        data:
          $ref: "#/components/schemas/DbaasUserModel"
    ErrorContent:
      type: object
      properties:
        code:
          type: string
          description: |-
            Application-level error code that describes how the error should be handled and how the `detail` field should be interpreted:
              * `HTTP_ERROR` - The error should be handled based on the HTTP status code (`status`) of the response according to RFC-9910, and `detail` should be interpreted as a human-readable string.
              * `CONCURRENT_UPDATE` - A concurrent update caused the `PUT` or `PATCH` request to fail. A `PUT` request can be retried after using `GET` to obtain the latest resource version and applying the desired change to it. A `PATCH` request can be retried without any changes to the request content.
              * `UNKNOWN_REQUEST` - The client request is unroutable due to an unknown content-type, method, or resource path. This can be indicate a versioning issue between the client and server.
          enum:
          - HTTP_ERROR
          - CONCURRENT_UPDATE
          - UNKNOWN_REQUEST
          x-enum-descriptions:
            HTTP_ERROR: "The error should be handled based on the HTTP status code\
              \ (`status`) of the response according to RFC-9910, and `detail` should\
              \ be interpreted as a human-readable string."
            CONCURRENT_UPDATE: A concurrent update caused the `PUT` or `PATCH` request
              to fail. A `PUT` request can be retried after using `GET` to obtain
              the latest resource version and applying the desired change to it. A
              `PATCH` request can be retried without any changes to the request content.
            UNKNOWN_REQUEST: "The client request is unroutable due to an unknown content-type,\
              \ method, or resource path. This can be indicate a versioning issue\
              \ between the client and server."
          x-order: 0
        status:
          type: string
          description: HTTP status code and reason
          x-order: 1
        detail:
          type: string
          description: Detail about the error
          x-order: 2
  securitySchemes:
    basicAuth:
      type: http
      scheme: BASIC
    bearerAuth:
      type: http
      scheme: BEARER

